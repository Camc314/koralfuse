/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CountryInfo,
    CountryInfoFromJSON,
    CountryInfoFromJSONTyped,
    CountryInfoToJSON,
    CultureDto,
    CultureDtoFromJSON,
    CultureDtoFromJSONTyped,
    CultureDtoToJSON,
    ExternalIdInfo,
    ExternalIdInfoFromJSON,
    ExternalIdInfoFromJSONTyped,
    ExternalIdInfoToJSON,
    NameValuePair,
    NameValuePairFromJSON,
    NameValuePairFromJSONTyped,
    NameValuePairToJSON,
    ParentalRating,
    ParentalRatingFromJSON,
    ParentalRatingFromJSONTyped,
    ParentalRatingToJSON,
} from './';

/**
 * 
 * @export
 * @interface MetadataEditorInfo
 */
export interface MetadataEditorInfo {
    /**
     * 
     * @type {Array<ParentalRating>}
     * @memberof MetadataEditorInfo
     */
    parentalRatingOptions?: Array<ParentalRating> | null;
    /**
     * 
     * @type {Array<CountryInfo>}
     * @memberof MetadataEditorInfo
     */
    countries?: Array<CountryInfo> | null;
    /**
     * 
     * @type {Array<CultureDto>}
     * @memberof MetadataEditorInfo
     */
    cultures?: Array<CultureDto> | null;
    /**
     * 
     * @type {Array<ExternalIdInfo>}
     * @memberof MetadataEditorInfo
     */
    externalIdInfos?: Array<ExternalIdInfo> | null;
    /**
     * 
     * @type {string}
     * @memberof MetadataEditorInfo
     */
    contentType?: string | null;
    /**
     * 
     * @type {Array<NameValuePair>}
     * @memberof MetadataEditorInfo
     */
    contentTypeOptions?: Array<NameValuePair> | null;
}

export function MetadataEditorInfoFromJSON(json: any): MetadataEditorInfo {
    return MetadataEditorInfoFromJSONTyped(json, false);
}

export function MetadataEditorInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetadataEditorInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parentalRatingOptions': !exists(json, 'ParentalRatingOptions') ? undefined : (json['ParentalRatingOptions'] === null ? null : (json['ParentalRatingOptions'] as Array<any>).map(ParentalRatingFromJSON)),
        'countries': !exists(json, 'Countries') ? undefined : (json['Countries'] === null ? null : (json['Countries'] as Array<any>).map(CountryInfoFromJSON)),
        'cultures': !exists(json, 'Cultures') ? undefined : (json['Cultures'] === null ? null : (json['Cultures'] as Array<any>).map(CultureDtoFromJSON)),
        'externalIdInfos': !exists(json, 'ExternalIdInfos') ? undefined : (json['ExternalIdInfos'] === null ? null : (json['ExternalIdInfos'] as Array<any>).map(ExternalIdInfoFromJSON)),
        'contentType': !exists(json, 'ContentType') ? undefined : json['ContentType'],
        'contentTypeOptions': !exists(json, 'ContentTypeOptions') ? undefined : (json['ContentTypeOptions'] === null ? null : (json['ContentTypeOptions'] as Array<any>).map(NameValuePairFromJSON)),
    };
}

export function MetadataEditorInfoToJSON(value?: MetadataEditorInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ParentalRatingOptions': value.parentalRatingOptions === undefined ? undefined : (value.parentalRatingOptions === null ? null : (value.parentalRatingOptions as Array<any>).map(ParentalRatingToJSON)),
        'Countries': value.countries === undefined ? undefined : (value.countries === null ? null : (value.countries as Array<any>).map(CountryInfoToJSON)),
        'Cultures': value.cultures === undefined ? undefined : (value.cultures === null ? null : (value.cultures as Array<any>).map(CultureDtoToJSON)),
        'ExternalIdInfos': value.externalIdInfos === undefined ? undefined : (value.externalIdInfos === null ? null : (value.externalIdInfos as Array<any>).map(ExternalIdInfoToJSON)),
        'ContentType': value.contentType,
        'ContentTypeOptions': value.contentTypeOptions === undefined ? undefined : (value.contentTypeOptions === null ? null : (value.contentTypeOptions as Array<any>).map(NameValuePairToJSON)),
    };
}


