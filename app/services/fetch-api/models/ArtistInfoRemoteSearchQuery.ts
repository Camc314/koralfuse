/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ArtistInfo,
    ArtistInfoFromJSON,
    ArtistInfoFromJSONTyped,
    ArtistInfoToJSON,
} from './';

/**
 * 
 * @export
 * @interface ArtistInfoRemoteSearchQuery
 */
export interface ArtistInfoRemoteSearchQuery {
    /**
     * 
     * @type {ArtistInfo}
     * @memberof ArtistInfoRemoteSearchQuery
     */
    searchInfo?: ArtistInfo;
    /**
     * 
     * @type {string}
     * @memberof ArtistInfoRemoteSearchQuery
     */
    itemId?: string;
    /**
     * Will only search within the given provider when set.
     * @type {string}
     * @memberof ArtistInfoRemoteSearchQuery
     */
    searchProviderName?: string | null;
    /**
     * Gets or sets a value indicating whether disabled providers should be included.
     * @type {boolean}
     * @memberof ArtistInfoRemoteSearchQuery
     */
    includeDisabledProviders?: boolean;
}

export function ArtistInfoRemoteSearchQueryFromJSON(json: any): ArtistInfoRemoteSearchQuery {
    return ArtistInfoRemoteSearchQueryFromJSONTyped(json, false);
}

export function ArtistInfoRemoteSearchQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArtistInfoRemoteSearchQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'searchInfo': !exists(json, 'SearchInfo') ? undefined : ArtistInfoFromJSON(json['SearchInfo']),
        'itemId': !exists(json, 'ItemId') ? undefined : json['ItemId'],
        'searchProviderName': !exists(json, 'SearchProviderName') ? undefined : json['SearchProviderName'],
        'includeDisabledProviders': !exists(json, 'IncludeDisabledProviders') ? undefined : json['IncludeDisabledProviders'],
    };
}

export function ArtistInfoRemoteSearchQueryToJSON(value?: ArtistInfoRemoteSearchQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'SearchInfo': ArtistInfoToJSON(value.searchInfo),
        'ItemId': value.itemId,
        'SearchProviderName': value.searchProviderName,
        'IncludeDisabledProviders': value.includeDisabledProviders,
    };
}


