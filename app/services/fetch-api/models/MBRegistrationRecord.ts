/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * MB Registration Record.
 * @export
 * @interface MBRegistrationRecord
 */
export interface MBRegistrationRecord {
    /**
     * Gets or sets expiration date.
     * @type {Date}
     * @memberof MBRegistrationRecord
     */
    expirationDate?: Date;
    /**
     * Gets or sets a value indicating whether is registered.
     * @type {boolean}
     * @memberof MBRegistrationRecord
     */
    isRegistered?: boolean;
    /**
     * Gets or sets a value indicating whether reg checked.
     * @type {boolean}
     * @memberof MBRegistrationRecord
     */
    regChecked?: boolean;
    /**
     * Gets or sets a value indicating whether reg error.
     * @type {boolean}
     * @memberof MBRegistrationRecord
     */
    regError?: boolean;
    /**
     * Gets or sets a value indicating whether trial version.
     * @type {boolean}
     * @memberof MBRegistrationRecord
     */
    trialVersion?: boolean;
    /**
     * Gets or sets a value indicating whether is valid.
     * @type {boolean}
     * @memberof MBRegistrationRecord
     */
    isValid?: boolean;
}

export function MBRegistrationRecordFromJSON(json: any): MBRegistrationRecord {
    return MBRegistrationRecordFromJSONTyped(json, false);
}

export function MBRegistrationRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): MBRegistrationRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'expirationDate': !exists(json, 'ExpirationDate') ? undefined : (new Date(json['ExpirationDate'])),
        'isRegistered': !exists(json, 'IsRegistered') ? undefined : json['IsRegistered'],
        'regChecked': !exists(json, 'RegChecked') ? undefined : json['RegChecked'],
        'regError': !exists(json, 'RegError') ? undefined : json['RegError'],
        'trialVersion': !exists(json, 'TrialVersion') ? undefined : json['TrialVersion'],
        'isValid': !exists(json, 'IsValid') ? undefined : json['IsValid'],
    };
}

export function MBRegistrationRecordToJSON(value?: MBRegistrationRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ExpirationDate': value.expirationDate === undefined ? undefined : (value.expirationDate.toISOString()),
        'IsRegistered': value.isRegistered,
        'RegChecked': value.regChecked,
        'RegError': value.regError,
        'TrialVersion': value.trialVersion,
        'IsValid': value.isValid,
    };
}


