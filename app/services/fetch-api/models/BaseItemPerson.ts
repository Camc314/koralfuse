/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BaseItemPersonImageBlurHashes,
    BaseItemPersonImageBlurHashesFromJSON,
    BaseItemPersonImageBlurHashesFromJSONTyped,
    BaseItemPersonImageBlurHashesToJSON,
} from './';

/**
 * This is used by the api to get information about a Person within a BaseItem.
 * @export
 * @interface BaseItemPerson
 */
export interface BaseItemPerson {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof BaseItemPerson
     */
    name?: string | null;
    /**
     * Gets or sets the identifier.
     * @type {string}
     * @memberof BaseItemPerson
     */
    id?: string | null;
    /**
     * Gets or sets the role.
     * @type {string}
     * @memberof BaseItemPerson
     */
    role?: string | null;
    /**
     * Gets or sets the type.
     * @type {string}
     * @memberof BaseItemPerson
     */
    type?: string | null;
    /**
     * Gets or sets the primary image tag.
     * @type {string}
     * @memberof BaseItemPerson
     */
    primaryImageTag?: string | null;
    /**
     * 
     * @type {BaseItemPersonImageBlurHashes}
     * @memberof BaseItemPerson
     */
    imageBlurHashes?: BaseItemPersonImageBlurHashes | null;
}

export function BaseItemPersonFromJSON(json: any): BaseItemPerson {
    return BaseItemPersonFromJSONTyped(json, false);
}

export function BaseItemPersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseItemPerson {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'role': !exists(json, 'Role') ? undefined : json['Role'],
        'type': !exists(json, 'Type') ? undefined : json['Type'],
        'primaryImageTag': !exists(json, 'PrimaryImageTag') ? undefined : json['PrimaryImageTag'],
        'imageBlurHashes': !exists(json, 'ImageBlurHashes') ? undefined : BaseItemPersonImageBlurHashesFromJSON(json['ImageBlurHashes']),
    };
}

export function BaseItemPersonToJSON(value?: BaseItemPerson | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Id': value.id,
        'Role': value.role,
        'Type': value.type,
        'PrimaryImageTag': value.primaryImageTag,
        'ImageBlurHashes': BaseItemPersonImageBlurHashesToJSON(value.imageBlurHashes),
    };
}


