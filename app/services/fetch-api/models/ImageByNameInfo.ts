/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImageByNameInfo
 */
export interface ImageByNameInfo {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof ImageByNameInfo
     */
    name?: string | null;
    /**
     * Gets or sets the theme.
     * @type {string}
     * @memberof ImageByNameInfo
     */
    theme?: string | null;
    /**
     * Gets or sets the context.
     * @type {string}
     * @memberof ImageByNameInfo
     */
    context?: string | null;
    /**
     * Gets or sets the length of the file.
     * @type {number}
     * @memberof ImageByNameInfo
     */
    fileLength?: number;
    /**
     * Gets or sets the format.
     * @type {string}
     * @memberof ImageByNameInfo
     */
    format?: string | null;
}

export function ImageByNameInfoFromJSON(json: any): ImageByNameInfo {
    return ImageByNameInfoFromJSONTyped(json, false);
}

export function ImageByNameInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageByNameInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'theme': !exists(json, 'Theme') ? undefined : json['Theme'],
        'context': !exists(json, 'Context') ? undefined : json['Context'],
        'fileLength': !exists(json, 'FileLength') ? undefined : json['FileLength'],
        'format': !exists(json, 'Format') ? undefined : json['Format'],
    };
}

export function ImageByNameInfoToJSON(value?: ImageByNameInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Theme': value.theme,
        'Context': value.context,
        'FileLength': value.fileLength,
        'Format': value.format,
    };
}


