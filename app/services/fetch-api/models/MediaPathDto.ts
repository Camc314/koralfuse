/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MediaPathInfo,
    MediaPathInfoFromJSON,
    MediaPathInfoFromJSONTyped,
    MediaPathInfoToJSON,
} from './';

/**
 * Media Path dto.
 * @export
 * @interface MediaPathDto
 */
export interface MediaPathDto {
    /**
     * Gets or sets the name of the library.
     * @type {string}
     * @memberof MediaPathDto
     */
    name: string;
    /**
     * Gets or sets the path to add.
     * @type {string}
     * @memberof MediaPathDto
     */
    path?: string | null;
    /**
     * 
     * @type {MediaPathInfo}
     * @memberof MediaPathDto
     */
    pathInfo?: MediaPathInfo;
}

export function MediaPathDtoFromJSON(json: any): MediaPathDto {
    return MediaPathDtoFromJSONTyped(json, false);
}

export function MediaPathDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaPathDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['Name'],
        'path': !exists(json, 'Path') ? undefined : json['Path'],
        'pathInfo': !exists(json, 'PathInfo') ? undefined : MediaPathInfoFromJSON(json['PathInfo']),
    };
}

export function MediaPathDtoToJSON(value?: MediaPathDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Path': value.path,
        'PathInfo': MediaPathInfoToJSON(value.pathInfo),
    };
}


