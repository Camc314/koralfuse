/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Version,
    VersionFromJSON,
    VersionFromJSONTyped,
    VersionToJSON,
} from './';

/**
 * Interface IPlugin.
 * @export
 * @interface IPlugin
 */
export interface IPlugin {
    /**
     * Gets the name of the plugin.
     * @type {string}
     * @memberof IPlugin
     */
    readonly name?: string | null;
    /**
     * Gets the description.
     * @type {string}
     * @memberof IPlugin
     */
    readonly description?: string | null;
    /**
     * Gets the unique id.
     * @type {string}
     * @memberof IPlugin
     */
    readonly id?: string;
    /**
     * 
     * @type {Version}
     * @memberof IPlugin
     */
    version?: Version;
    /**
     * Gets the path to the assembly file.
     * @type {string}
     * @memberof IPlugin
     */
    readonly assemblyFilePath?: string | null;
    /**
     * Gets a value indicating whether the plugin can be uninstalled.
     * @type {boolean}
     * @memberof IPlugin
     */
    readonly canUninstall?: boolean;
    /**
     * Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
     * @type {string}
     * @memberof IPlugin
     */
    readonly dataFolderPath?: string | null;
}

export function IPluginFromJSON(json: any): IPlugin {
    return IPluginFromJSONTyped(json, false);
}

export function IPluginFromJSONTyped(json: any, ignoreDiscriminator: boolean): IPlugin {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'version': !exists(json, 'Version') ? undefined : VersionFromJSON(json['Version']),
        'assemblyFilePath': !exists(json, 'AssemblyFilePath') ? undefined : json['AssemblyFilePath'],
        'canUninstall': !exists(json, 'CanUninstall') ? undefined : json['CanUninstall'],
        'dataFolderPath': !exists(json, 'DataFolderPath') ? undefined : json['DataFolderPath'],
    };
}

export function IPluginToJSON(value?: IPlugin | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Version': VersionToJSON(value.version),
    };
}


