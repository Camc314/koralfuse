/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CodecProfile,
    CodecProfileFromJSON,
    CodecProfileFromJSONTyped,
    CodecProfileToJSON,
    ContainerProfile,
    ContainerProfileFromJSON,
    ContainerProfileFromJSONTyped,
    ContainerProfileToJSON,
    DeviceIdentification,
    DeviceIdentificationFromJSON,
    DeviceIdentificationFromJSONTyped,
    DeviceIdentificationToJSON,
    DirectPlayProfile,
    DirectPlayProfileFromJSON,
    DirectPlayProfileFromJSONTyped,
    DirectPlayProfileToJSON,
    ResponseProfile,
    ResponseProfileFromJSON,
    ResponseProfileFromJSONTyped,
    ResponseProfileToJSON,
    SubtitleProfile,
    SubtitleProfileFromJSON,
    SubtitleProfileFromJSONTyped,
    SubtitleProfileToJSON,
    TranscodingProfile,
    TranscodingProfileFromJSON,
    TranscodingProfileFromJSONTyped,
    TranscodingProfileToJSON,
    XmlAttribute,
    XmlAttributeFromJSON,
    XmlAttributeFromJSONTyped,
    XmlAttributeToJSON,
} from './';

/**
 * 
 * @export
 * @interface DeviceProfile
 */
export interface DeviceProfile {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof DeviceProfile
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    id?: string | null;
    /**
     * 
     * @type {DeviceIdentification}
     * @memberof DeviceProfile
     */
    identification?: DeviceIdentification;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    friendlyName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    manufacturer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    manufacturerUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    modelName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    modelDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    modelNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    modelUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    serialNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceProfile
     */
    enableAlbumArtInDidl?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceProfile
     */
    enableSingleAlbumArtLimit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceProfile
     */
    enableSingleSubtitleLimit?: boolean;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    supportedMediaTypes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    userId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    albumArtPn?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    maxAlbumArtWidth?: number;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    maxAlbumArtHeight?: number;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    maxIconWidth?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    maxIconHeight?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    maxStreamingBitrate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    maxStaticBitrate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    musicStreamingTranscodingBitrate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    maxStaticMusicBitrate?: number | null;
    /**
     * Controls the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.
     * @type {string}
     * @memberof DeviceProfile
     */
    sonyAggregationFlags?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceProfile
     */
    protocolInfo?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DeviceProfile
     */
    timelineOffsetSeconds?: number;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceProfile
     */
    requiresPlainVideoItems?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceProfile
     */
    requiresPlainFolders?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceProfile
     */
    enableMSMediaReceiverRegistrar?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceProfile
     */
    ignoreTranscodeByteRangeRequests?: boolean;
    /**
     * 
     * @type {Array<XmlAttribute>}
     * @memberof DeviceProfile
     */
    xmlRootAttributes?: Array<XmlAttribute> | null;
    /**
     * Gets or sets the direct play profiles.
     * @type {Array<DirectPlayProfile>}
     * @memberof DeviceProfile
     */
    directPlayProfiles?: Array<DirectPlayProfile> | null;
    /**
     * Gets or sets the transcoding profiles.
     * @type {Array<TranscodingProfile>}
     * @memberof DeviceProfile
     */
    transcodingProfiles?: Array<TranscodingProfile> | null;
    /**
     * 
     * @type {Array<ContainerProfile>}
     * @memberof DeviceProfile
     */
    containerProfiles?: Array<ContainerProfile> | null;
    /**
     * 
     * @type {Array<CodecProfile>}
     * @memberof DeviceProfile
     */
    codecProfiles?: Array<CodecProfile> | null;
    /**
     * 
     * @type {Array<ResponseProfile>}
     * @memberof DeviceProfile
     */
    responseProfiles?: Array<ResponseProfile> | null;
    /**
     * 
     * @type {Array<SubtitleProfile>}
     * @memberof DeviceProfile
     */
    subtitleProfiles?: Array<SubtitleProfile> | null;
}

export function DeviceProfileFromJSON(json: any): DeviceProfile {
    return DeviceProfileFromJSONTyped(json, false);
}

export function DeviceProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'identification': !exists(json, 'Identification') ? undefined : DeviceIdentificationFromJSON(json['Identification']),
        'friendlyName': !exists(json, 'FriendlyName') ? undefined : json['FriendlyName'],
        'manufacturer': !exists(json, 'Manufacturer') ? undefined : json['Manufacturer'],
        'manufacturerUrl': !exists(json, 'ManufacturerUrl') ? undefined : json['ManufacturerUrl'],
        'modelName': !exists(json, 'ModelName') ? undefined : json['ModelName'],
        'modelDescription': !exists(json, 'ModelDescription') ? undefined : json['ModelDescription'],
        'modelNumber': !exists(json, 'ModelNumber') ? undefined : json['ModelNumber'],
        'modelUrl': !exists(json, 'ModelUrl') ? undefined : json['ModelUrl'],
        'serialNumber': !exists(json, 'SerialNumber') ? undefined : json['SerialNumber'],
        'enableAlbumArtInDidl': !exists(json, 'EnableAlbumArtInDidl') ? undefined : json['EnableAlbumArtInDidl'],
        'enableSingleAlbumArtLimit': !exists(json, 'EnableSingleAlbumArtLimit') ? undefined : json['EnableSingleAlbumArtLimit'],
        'enableSingleSubtitleLimit': !exists(json, 'EnableSingleSubtitleLimit') ? undefined : json['EnableSingleSubtitleLimit'],
        'supportedMediaTypes': !exists(json, 'SupportedMediaTypes') ? undefined : json['SupportedMediaTypes'],
        'userId': !exists(json, 'UserId') ? undefined : json['UserId'],
        'albumArtPn': !exists(json, 'AlbumArtPn') ? undefined : json['AlbumArtPn'],
        'maxAlbumArtWidth': !exists(json, 'MaxAlbumArtWidth') ? undefined : json['MaxAlbumArtWidth'],
        'maxAlbumArtHeight': !exists(json, 'MaxAlbumArtHeight') ? undefined : json['MaxAlbumArtHeight'],
        'maxIconWidth': !exists(json, 'MaxIconWidth') ? undefined : json['MaxIconWidth'],
        'maxIconHeight': !exists(json, 'MaxIconHeight') ? undefined : json['MaxIconHeight'],
        'maxStreamingBitrate': !exists(json, 'MaxStreamingBitrate') ? undefined : json['MaxStreamingBitrate'],
        'maxStaticBitrate': !exists(json, 'MaxStaticBitrate') ? undefined : json['MaxStaticBitrate'],
        'musicStreamingTranscodingBitrate': !exists(json, 'MusicStreamingTranscodingBitrate') ? undefined : json['MusicStreamingTranscodingBitrate'],
        'maxStaticMusicBitrate': !exists(json, 'MaxStaticMusicBitrate') ? undefined : json['MaxStaticMusicBitrate'],
        'sonyAggregationFlags': !exists(json, 'SonyAggregationFlags') ? undefined : json['SonyAggregationFlags'],
        'protocolInfo': !exists(json, 'ProtocolInfo') ? undefined : json['ProtocolInfo'],
        'timelineOffsetSeconds': !exists(json, 'TimelineOffsetSeconds') ? undefined : json['TimelineOffsetSeconds'],
        'requiresPlainVideoItems': !exists(json, 'RequiresPlainVideoItems') ? undefined : json['RequiresPlainVideoItems'],
        'requiresPlainFolders': !exists(json, 'RequiresPlainFolders') ? undefined : json['RequiresPlainFolders'],
        'enableMSMediaReceiverRegistrar': !exists(json, 'EnableMSMediaReceiverRegistrar') ? undefined : json['EnableMSMediaReceiverRegistrar'],
        'ignoreTranscodeByteRangeRequests': !exists(json, 'IgnoreTranscodeByteRangeRequests') ? undefined : json['IgnoreTranscodeByteRangeRequests'],
        'xmlRootAttributes': !exists(json, 'XmlRootAttributes') ? undefined : (json['XmlRootAttributes'] === null ? null : (json['XmlRootAttributes'] as Array<any>).map(XmlAttributeFromJSON)),
        'directPlayProfiles': !exists(json, 'DirectPlayProfiles') ? undefined : (json['DirectPlayProfiles'] === null ? null : (json['DirectPlayProfiles'] as Array<any>).map(DirectPlayProfileFromJSON)),
        'transcodingProfiles': !exists(json, 'TranscodingProfiles') ? undefined : (json['TranscodingProfiles'] === null ? null : (json['TranscodingProfiles'] as Array<any>).map(TranscodingProfileFromJSON)),
        'containerProfiles': !exists(json, 'ContainerProfiles') ? undefined : (json['ContainerProfiles'] === null ? null : (json['ContainerProfiles'] as Array<any>).map(ContainerProfileFromJSON)),
        'codecProfiles': !exists(json, 'CodecProfiles') ? undefined : (json['CodecProfiles'] === null ? null : (json['CodecProfiles'] as Array<any>).map(CodecProfileFromJSON)),
        'responseProfiles': !exists(json, 'ResponseProfiles') ? undefined : (json['ResponseProfiles'] === null ? null : (json['ResponseProfiles'] as Array<any>).map(ResponseProfileFromJSON)),
        'subtitleProfiles': !exists(json, 'SubtitleProfiles') ? undefined : (json['SubtitleProfiles'] === null ? null : (json['SubtitleProfiles'] as Array<any>).map(SubtitleProfileFromJSON)),
    };
}

export function DeviceProfileToJSON(value?: DeviceProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Id': value.id,
        'Identification': DeviceIdentificationToJSON(value.identification),
        'FriendlyName': value.friendlyName,
        'Manufacturer': value.manufacturer,
        'ManufacturerUrl': value.manufacturerUrl,
        'ModelName': value.modelName,
        'ModelDescription': value.modelDescription,
        'ModelNumber': value.modelNumber,
        'ModelUrl': value.modelUrl,
        'SerialNumber': value.serialNumber,
        'EnableAlbumArtInDidl': value.enableAlbumArtInDidl,
        'EnableSingleAlbumArtLimit': value.enableSingleAlbumArtLimit,
        'EnableSingleSubtitleLimit': value.enableSingleSubtitleLimit,
        'SupportedMediaTypes': value.supportedMediaTypes,
        'UserId': value.userId,
        'AlbumArtPn': value.albumArtPn,
        'MaxAlbumArtWidth': value.maxAlbumArtWidth,
        'MaxAlbumArtHeight': value.maxAlbumArtHeight,
        'MaxIconWidth': value.maxIconWidth,
        'MaxIconHeight': value.maxIconHeight,
        'MaxStreamingBitrate': value.maxStreamingBitrate,
        'MaxStaticBitrate': value.maxStaticBitrate,
        'MusicStreamingTranscodingBitrate': value.musicStreamingTranscodingBitrate,
        'MaxStaticMusicBitrate': value.maxStaticMusicBitrate,
        'SonyAggregationFlags': value.sonyAggregationFlags,
        'ProtocolInfo': value.protocolInfo,
        'TimelineOffsetSeconds': value.timelineOffsetSeconds,
        'RequiresPlainVideoItems': value.requiresPlainVideoItems,
        'RequiresPlainFolders': value.requiresPlainFolders,
        'EnableMSMediaReceiverRegistrar': value.enableMSMediaReceiverRegistrar,
        'IgnoreTranscodeByteRangeRequests': value.ignoreTranscodeByteRangeRequests,
        'XmlRootAttributes': value.xmlRootAttributes === undefined ? undefined : (value.xmlRootAttributes === null ? null : (value.xmlRootAttributes as Array<any>).map(XmlAttributeToJSON)),
        'DirectPlayProfiles': value.directPlayProfiles === undefined ? undefined : (value.directPlayProfiles === null ? null : (value.directPlayProfiles as Array<any>).map(DirectPlayProfileToJSON)),
        'TranscodingProfiles': value.transcodingProfiles === undefined ? undefined : (value.transcodingProfiles === null ? null : (value.transcodingProfiles as Array<any>).map(TranscodingProfileToJSON)),
        'ContainerProfiles': value.containerProfiles === undefined ? undefined : (value.containerProfiles === null ? null : (value.containerProfiles as Array<any>).map(ContainerProfileToJSON)),
        'CodecProfiles': value.codecProfiles === undefined ? undefined : (value.codecProfiles === null ? null : (value.codecProfiles as Array<any>).map(CodecProfileToJSON)),
        'ResponseProfiles': value.responseProfiles === undefined ? undefined : (value.responseProfiles === null ? null : (value.responseProfiles as Array<any>).map(ResponseProfileToJSON)),
        'SubtitleProfiles': value.subtitleProfiles === undefined ? undefined : (value.subtitleProfiles === null ? null : (value.subtitleProfiles as Array<any>).map(SubtitleProfileToJSON)),
    };
}


