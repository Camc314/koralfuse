/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConfigurationPageType,
    ConfigurationPageTypeFromJSON,
    ConfigurationPageTypeFromJSONTyped,
    ConfigurationPageTypeToJSON,
} from './';

/**
 * The configuration page info.
 * @export
 * @interface ConfigurationPageInfo
 */
export interface ConfigurationPageInfo {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof ConfigurationPageInfo
     */
    name?: string | null;
    /**
     * Gets or sets a value indicating whether the configurations page is enabled in the main menu.
     * @type {boolean}
     * @memberof ConfigurationPageInfo
     */
    enableInMainMenu?: boolean;
    /**
     * Gets or sets the menu section.
     * @type {string}
     * @memberof ConfigurationPageInfo
     */
    menuSection?: string | null;
    /**
     * Gets or sets the menu icon.
     * @type {string}
     * @memberof ConfigurationPageInfo
     */
    menuIcon?: string | null;
    /**
     * Gets or sets the display name.
     * @type {string}
     * @memberof ConfigurationPageInfo
     */
    displayName?: string | null;
    /**
     * 
     * @type {ConfigurationPageType}
     * @memberof ConfigurationPageInfo
     */
    configurationPageType?: ConfigurationPageType;
    /**
     * Gets or sets the plugin id.
     * @type {string}
     * @memberof ConfigurationPageInfo
     */
    pluginId?: string | null;
}

export function ConfigurationPageInfoFromJSON(json: any): ConfigurationPageInfo {
    return ConfigurationPageInfoFromJSONTyped(json, false);
}

export function ConfigurationPageInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigurationPageInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'enableInMainMenu': !exists(json, 'EnableInMainMenu') ? undefined : json['EnableInMainMenu'],
        'menuSection': !exists(json, 'MenuSection') ? undefined : json['MenuSection'],
        'menuIcon': !exists(json, 'MenuIcon') ? undefined : json['MenuIcon'],
        'displayName': !exists(json, 'DisplayName') ? undefined : json['DisplayName'],
        'configurationPageType': !exists(json, 'ConfigurationPageType') ? undefined : ConfigurationPageTypeFromJSON(json['ConfigurationPageType']),
        'pluginId': !exists(json, 'PluginId') ? undefined : json['PluginId'],
    };
}

export function ConfigurationPageInfoToJSON(value?: ConfigurationPageInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'EnableInMainMenu': value.enableInMainMenu,
        'MenuSection': value.menuSection,
        'MenuIcon': value.menuIcon,
        'DisplayName': value.displayName,
        'ConfigurationPageType': ConfigurationPageTypeToJSON(value.configurationPageType),
        'PluginId': value.pluginId,
    };
}


