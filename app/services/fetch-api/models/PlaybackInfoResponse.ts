/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MediaSourceInfo,
    MediaSourceInfoFromJSON,
    MediaSourceInfoFromJSONTyped,
    MediaSourceInfoToJSON,
    PlaybackErrorCode,
    PlaybackErrorCodeFromJSON,
    PlaybackErrorCodeFromJSONTyped,
    PlaybackErrorCodeToJSON,
} from './';

/**
 * Class PlaybackInfoResponse.
 * @export
 * @interface PlaybackInfoResponse
 */
export interface PlaybackInfoResponse {
    /**
     * Gets or sets the media sources.
     * @type {Array<MediaSourceInfo>}
     * @memberof PlaybackInfoResponse
     */
    mediaSources?: Array<MediaSourceInfo> | null;
    /**
     * Gets or sets the play session identifier.
     * @type {string}
     * @memberof PlaybackInfoResponse
     */
    playSessionId?: string | null;
    /**
     * 
     * @type {PlaybackErrorCode}
     * @memberof PlaybackInfoResponse
     */
    errorCode?: PlaybackErrorCode;
}

export function PlaybackInfoResponseFromJSON(json: any): PlaybackInfoResponse {
    return PlaybackInfoResponseFromJSONTyped(json, false);
}

export function PlaybackInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaybackInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mediaSources': !exists(json, 'MediaSources') ? undefined : (json['MediaSources'] === null ? null : (json['MediaSources'] as Array<any>).map(MediaSourceInfoFromJSON)),
        'playSessionId': !exists(json, 'PlaySessionId') ? undefined : json['PlaySessionId'],
        'errorCode': !exists(json, 'ErrorCode') ? undefined : PlaybackErrorCodeFromJSON(json['ErrorCode']),
    };
}

export function PlaybackInfoResponseToJSON(value?: PlaybackInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'MediaSources': value.mediaSources === undefined ? undefined : (value.mediaSources === null ? null : (value.mediaSources as Array<any>).map(MediaSourceInfoToJSON)),
        'PlaySessionId': value.playSessionId,
        'ErrorCode': PlaybackErrorCodeToJSON(value.errorCode),
    };
}


