/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Version,
    VersionFromJSON,
    VersionFromJSONTyped,
    VersionToJSON,
} from './';

/**
 * Class InstallationInfo.
 * @export
 * @interface InstallationInfo
 */
export interface InstallationInfo {
    /**
     * Gets or sets the guid.
     * @type {string}
     * @memberof InstallationInfo
     */
    guid?: string;
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof InstallationInfo
     */
    name?: string | null;
    /**
     * 
     * @type {Version}
     * @memberof InstallationInfo
     */
    version?: Version;
    /**
     * Gets or sets the changelog for this version.
     * @type {string}
     * @memberof InstallationInfo
     */
    changelog?: string | null;
    /**
     * Gets or sets the source URL.
     * @type {string}
     * @memberof InstallationInfo
     */
    sourceUrl?: string | null;
    /**
     * Gets or sets a checksum for the binary.
     * @type {string}
     * @memberof InstallationInfo
     */
    checksum?: string | null;
}

export function InstallationInfoFromJSON(json: any): InstallationInfo {
    return InstallationInfoFromJSONTyped(json, false);
}

export function InstallationInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstallationInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'guid': !exists(json, 'Guid') ? undefined : json['Guid'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'version': !exists(json, 'Version') ? undefined : VersionFromJSON(json['Version']),
        'changelog': !exists(json, 'Changelog') ? undefined : json['Changelog'],
        'sourceUrl': !exists(json, 'SourceUrl') ? undefined : json['SourceUrl'],
        'checksum': !exists(json, 'Checksum') ? undefined : json['Checksum'],
    };
}

export function InstallationInfoToJSON(value?: InstallationInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Guid': value.guid,
        'Name': value.name,
        'Version': VersionToJSON(value.version),
        'Changelog': value.changelog,
        'SourceUrl': value.sourceUrl,
        'Checksum': value.checksum,
    };
}


