/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LibraryOptions,
    LibraryOptionsFromJSON,
    LibraryOptionsFromJSONTyped,
    LibraryOptionsToJSON,
} from './';

/**
 * Used to hold information about a user's list of configured virtual folders.
 * @export
 * @interface VirtualFolderInfo
 */
export interface VirtualFolderInfo {
    /**
     * Gets or sets the name.
     * @type {string}
     * @memberof VirtualFolderInfo
     */
    name?: string | null;
    /**
     * Gets or sets the locations.
     * @type {Array<string>}
     * @memberof VirtualFolderInfo
     */
    locations?: Array<string> | null;
    /**
     * Gets or sets the type of the collection.
     * @type {string}
     * @memberof VirtualFolderInfo
     */
    collectionType?: string | null;
    /**
     * 
     * @type {LibraryOptions}
     * @memberof VirtualFolderInfo
     */
    libraryOptions?: LibraryOptions;
    /**
     * Gets or sets the item identifier.
     * @type {string}
     * @memberof VirtualFolderInfo
     */
    itemId?: string | null;
    /**
     * Gets or sets the primary image item identifier.
     * @type {string}
     * @memberof VirtualFolderInfo
     */
    primaryImageItemId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof VirtualFolderInfo
     */
    refreshProgress?: number | null;
    /**
     * 
     * @type {string}
     * @memberof VirtualFolderInfo
     */
    refreshStatus?: string | null;
}

export function VirtualFolderInfoFromJSON(json: any): VirtualFolderInfo {
    return VirtualFolderInfoFromJSONTyped(json, false);
}

export function VirtualFolderInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): VirtualFolderInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'locations': !exists(json, 'Locations') ? undefined : json['Locations'],
        'collectionType': !exists(json, 'CollectionType') ? undefined : json['CollectionType'],
        'libraryOptions': !exists(json, 'LibraryOptions') ? undefined : LibraryOptionsFromJSON(json['LibraryOptions']),
        'itemId': !exists(json, 'ItemId') ? undefined : json['ItemId'],
        'primaryImageItemId': !exists(json, 'PrimaryImageItemId') ? undefined : json['PrimaryImageItemId'],
        'refreshProgress': !exists(json, 'RefreshProgress') ? undefined : json['RefreshProgress'],
        'refreshStatus': !exists(json, 'RefreshStatus') ? undefined : json['RefreshStatus'],
    };
}

export function VirtualFolderInfoToJSON(value?: VirtualFolderInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Locations': value.locations,
        'CollectionType': value.collectionType,
        'LibraryOptions': LibraryOptionsToJSON(value.libraryOptions),
        'ItemId': value.itemId,
        'PrimaryImageItemId': value.primaryImageItemId,
        'RefreshProgress': value.refreshProgress,
        'RefreshStatus': value.refreshStatus,
    };
}


