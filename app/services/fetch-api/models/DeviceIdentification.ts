/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    HttpHeaderInfo,
    HttpHeaderInfoFromJSON,
    HttpHeaderInfoFromJSONTyped,
    HttpHeaderInfoToJSON,
} from './';

/**
 * 
 * @export
 * @interface DeviceIdentification
 */
export interface DeviceIdentification {
    /**
     * Gets or sets the name of the friendly.
     * @type {string}
     * @memberof DeviceIdentification
     */
    friendlyName?: string | null;
    /**
     * Gets or sets the model number.
     * @type {string}
     * @memberof DeviceIdentification
     */
    modelNumber?: string | null;
    /**
     * Gets or sets the serial number.
     * @type {string}
     * @memberof DeviceIdentification
     */
    serialNumber?: string | null;
    /**
     * Gets or sets the name of the model.
     * @type {string}
     * @memberof DeviceIdentification
     */
    modelName?: string | null;
    /**
     * Gets or sets the model description.
     * @type {string}
     * @memberof DeviceIdentification
     */
    modelDescription?: string | null;
    /**
     * Gets or sets the model URL.
     * @type {string}
     * @memberof DeviceIdentification
     */
    modelUrl?: string | null;
    /**
     * Gets or sets the manufacturer.
     * @type {string}
     * @memberof DeviceIdentification
     */
    manufacturer?: string | null;
    /**
     * Gets or sets the manufacturer URL.
     * @type {string}
     * @memberof DeviceIdentification
     */
    manufacturerUrl?: string | null;
    /**
     * Gets or sets the headers.
     * @type {Array<HttpHeaderInfo>}
     * @memberof DeviceIdentification
     */
    headers?: Array<HttpHeaderInfo> | null;
}

export function DeviceIdentificationFromJSON(json: any): DeviceIdentification {
    return DeviceIdentificationFromJSONTyped(json, false);
}

export function DeviceIdentificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceIdentification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'friendlyName': !exists(json, 'FriendlyName') ? undefined : json['FriendlyName'],
        'modelNumber': !exists(json, 'ModelNumber') ? undefined : json['ModelNumber'],
        'serialNumber': !exists(json, 'SerialNumber') ? undefined : json['SerialNumber'],
        'modelName': !exists(json, 'ModelName') ? undefined : json['ModelName'],
        'modelDescription': !exists(json, 'ModelDescription') ? undefined : json['ModelDescription'],
        'modelUrl': !exists(json, 'ModelUrl') ? undefined : json['ModelUrl'],
        'manufacturer': !exists(json, 'Manufacturer') ? undefined : json['Manufacturer'],
        'manufacturerUrl': !exists(json, 'ManufacturerUrl') ? undefined : json['ManufacturerUrl'],
        'headers': !exists(json, 'Headers') ? undefined : (json['Headers'] === null ? null : (json['Headers'] as Array<any>).map(HttpHeaderInfoFromJSON)),
    };
}

export function DeviceIdentificationToJSON(value?: DeviceIdentification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'FriendlyName': value.friendlyName,
        'ModelNumber': value.modelNumber,
        'SerialNumber': value.serialNumber,
        'ModelName': value.modelName,
        'ModelDescription': value.modelDescription,
        'ModelUrl': value.modelUrl,
        'Manufacturer': value.manufacturer,
        'ManufacturerUrl': value.manufacturerUrl,
        'Headers': value.headers === undefined ? undefined : (value.headers === null ? null : (value.headers as Array<any>).map(HttpHeaderInfoToJSON)),
    };
}


