/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IScheduledTask,
    IScheduledTaskFromJSON,
    IScheduledTaskFromJSONTyped,
    IScheduledTaskToJSON,
    TaskResult,
    TaskResultFromJSON,
    TaskResultFromJSONTyped,
    TaskResultToJSON,
    TaskState,
    TaskStateFromJSON,
    TaskStateFromJSONTyped,
    TaskStateToJSON,
    TaskTriggerInfo,
    TaskTriggerInfoFromJSON,
    TaskTriggerInfoFromJSONTyped,
    TaskTriggerInfoToJSON,
} from './';

/**
 * Interface IScheduledTaskWorker.
 * @export
 * @interface IScheduledTaskWorker
 */
export interface IScheduledTaskWorker {
    /**
     * 
     * @type {IScheduledTask}
     * @memberof IScheduledTaskWorker
     */
    scheduledTask?: IScheduledTask;
    /**
     * 
     * @type {TaskResult}
     * @memberof IScheduledTaskWorker
     */
    lastExecutionResult?: TaskResult;
    /**
     * Gets the name.
     * @type {string}
     * @memberof IScheduledTaskWorker
     */
    readonly name?: string | null;
    /**
     * Gets the description.
     * @type {string}
     * @memberof IScheduledTaskWorker
     */
    readonly description?: string | null;
    /**
     * Gets the category.
     * @type {string}
     * @memberof IScheduledTaskWorker
     */
    readonly category?: string | null;
    /**
     * 
     * @type {TaskState}
     * @memberof IScheduledTaskWorker
     */
    state?: TaskState;
    /**
     * Gets the current progress.
     * @type {number}
     * @memberof IScheduledTaskWorker
     */
    readonly currentProgress?: number | null;
    /**
     * Gets the triggers that define when the task will run.
     * @type {Array<TaskTriggerInfo>}
     * @memberof IScheduledTaskWorker
     */
    triggers?: Array<TaskTriggerInfo> | null;
    /**
     * Gets the unique id.
     * @type {string}
     * @memberof IScheduledTaskWorker
     */
    readonly id?: string | null;
}

export function IScheduledTaskWorkerFromJSON(json: any): IScheduledTaskWorker {
    return IScheduledTaskWorkerFromJSONTyped(json, false);
}

export function IScheduledTaskWorkerFromJSONTyped(json: any, ignoreDiscriminator: boolean): IScheduledTaskWorker {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'scheduledTask': !exists(json, 'ScheduledTask') ? undefined : IScheduledTaskFromJSON(json['ScheduledTask']),
        'lastExecutionResult': !exists(json, 'LastExecutionResult') ? undefined : TaskResultFromJSON(json['LastExecutionResult']),
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'category': !exists(json, 'Category') ? undefined : json['Category'],
        'state': !exists(json, 'State') ? undefined : TaskStateFromJSON(json['State']),
        'currentProgress': !exists(json, 'CurrentProgress') ? undefined : json['CurrentProgress'],
        'triggers': !exists(json, 'Triggers') ? undefined : (json['Triggers'] === null ? null : (json['Triggers'] as Array<any>).map(TaskTriggerInfoFromJSON)),
        'id': !exists(json, 'Id') ? undefined : json['Id'],
    };
}

export function IScheduledTaskWorkerToJSON(value?: IScheduledTaskWorker | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ScheduledTask': IScheduledTaskToJSON(value.scheduledTask),
        'LastExecutionResult': TaskResultToJSON(value.lastExecutionResult),
        'State': TaskStateToJSON(value.state),
        'Triggers': value.triggers === undefined ? undefined : (value.triggers === null ? null : (value.triggers as Array<any>).map(TaskTriggerInfoToJSON)),
    };
}


