/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ImageType,
    ImageTypeFromJSON,
    ImageTypeFromJSONTyped,
    ImageTypeToJSON,
} from './';

/**
 * Class ImageInfo.
 * @export
 * @interface ImageInfo
 */
export interface ImageInfo {
    /**
     * 
     * @type {ImageType}
     * @memberof ImageInfo
     */
    imageType?: ImageType;
    /**
     * Gets or sets the index of the image.
     * @type {number}
     * @memberof ImageInfo
     */
    imageIndex?: number | null;
    /**
     * Gets or sets the image tag.
     * @type {string}
     * @memberof ImageInfo
     */
    imageTag?: string | null;
    /**
     * Gets or sets the path.
     * @type {string}
     * @memberof ImageInfo
     */
    path?: string | null;
    /**
     * Gets or sets the blurhash.
     * @type {string}
     * @memberof ImageInfo
     */
    blurHash?: string | null;
    /**
     * Gets or sets the height.
     * @type {number}
     * @memberof ImageInfo
     */
    height?: number | null;
    /**
     * Gets or sets the width.
     * @type {number}
     * @memberof ImageInfo
     */
    width?: number | null;
    /**
     * Gets or sets the size.
     * @type {number}
     * @memberof ImageInfo
     */
    size?: number;
}

export function ImageInfoFromJSON(json: any): ImageInfo {
    return ImageInfoFromJSONTyped(json, false);
}

export function ImageInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'imageType': !exists(json, 'ImageType') ? undefined : ImageTypeFromJSON(json['ImageType']),
        'imageIndex': !exists(json, 'ImageIndex') ? undefined : json['ImageIndex'],
        'imageTag': !exists(json, 'ImageTag') ? undefined : json['ImageTag'],
        'path': !exists(json, 'Path') ? undefined : json['Path'],
        'blurHash': !exists(json, 'BlurHash') ? undefined : json['BlurHash'],
        'height': !exists(json, 'Height') ? undefined : json['Height'],
        'width': !exists(json, 'Width') ? undefined : json['Width'],
        'size': !exists(json, 'Size') ? undefined : json['Size'],
    };
}

export function ImageInfoToJSON(value?: ImageInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ImageType': ImageTypeToJSON(value.imageType),
        'ImageIndex': value.imageIndex,
        'ImageTag': value.imageTag,
        'Path': value.path,
        'BlurHash': value.blurHash,
        'Height': value.height,
        'Width': value.width,
        'Size': value.size,
    };
}


