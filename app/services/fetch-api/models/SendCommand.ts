/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SendCommandType,
    SendCommandTypeFromJSON,
    SendCommandTypeFromJSONTyped,
    SendCommandTypeToJSON,
} from './';

/**
 * Class SendCommand.
 * @export
 * @interface SendCommand
 */
export interface SendCommand {
    /**
     * Gets or sets the group identifier.
     * @type {string}
     * @memberof SendCommand
     */
    groupId?: string | null;
    /**
     * Gets or sets the UTC time when to execute the command.
     * @type {string}
     * @memberof SendCommand
     */
    when?: string | null;
    /**
     * Gets or sets the position ticks.
     * @type {number}
     * @memberof SendCommand
     */
    positionTicks?: number | null;
    /**
     * 
     * @type {SendCommandType}
     * @memberof SendCommand
     */
    command?: SendCommandType;
    /**
     * Gets or sets the UTC time when this command has been emitted.
     * @type {string}
     * @memberof SendCommand
     */
    emittedAt?: string | null;
}

export function SendCommandFromJSON(json: any): SendCommand {
    return SendCommandFromJSONTyped(json, false);
}

export function SendCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendCommand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groupId': !exists(json, 'GroupId') ? undefined : json['GroupId'],
        'when': !exists(json, 'When') ? undefined : json['When'],
        'positionTicks': !exists(json, 'PositionTicks') ? undefined : json['PositionTicks'],
        'command': !exists(json, 'Command') ? undefined : SendCommandTypeFromJSON(json['Command']),
        'emittedAt': !exists(json, 'EmittedAt') ? undefined : json['EmittedAt'],
    };
}

export function SendCommandToJSON(value?: SendCommand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'GroupId': value.groupId,
        'When': value.when,
        'PositionTicks': value.positionTicks,
        'Command': SendCommandTypeToJSON(value.command),
        'EmittedAt': value.emittedAt,
    };
}


