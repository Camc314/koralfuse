/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EndPointInfo,
    EndPointInfoFromJSON,
    EndPointInfoToJSON,
    LogFile,
    LogFileFromJSON,
    LogFileToJSON,
    PublicSystemInfo,
    PublicSystemInfoFromJSON,
    PublicSystemInfoToJSON,
    SystemInfo,
    SystemInfoFromJSON,
    SystemInfoToJSON,
    WakeOnLanInfo,
    WakeOnLanInfoFromJSON,
    WakeOnLanInfoToJSON,
} from '../models';

export interface GetLogFileRequest {
    name: string;
}

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * Gets information about the request endpoint.
     */
    async getEndpointInfoRaw(): Promise<runtime.ApiResponse<EndPointInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Endpoint`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndPointInfoFromJSON(jsonValue));
    }

    /**
     * Gets information about the request endpoint.
     */
    async getEndpointInfo(): Promise<EndPointInfo> {
        const response = await this.getEndpointInfoRaw();
        return await response.value();
    }

    /**
     * Gets a log file.
     */
    async getLogFileRaw(requestParameters: GetLogFileRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getLogFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Logs/Log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a log file.
     */
    async getLogFile(requestParameters: GetLogFileRequest): Promise<any> {
        const response = await this.getLogFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Pings the system.
     */
    async getPingSystemRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Pings the system.
     */
    async getPingSystem(): Promise<string> {
        const response = await this.getPingSystemRaw();
        return await response.value();
    }

    /**
     * Gets public information about the server.
     */
    async getPublicSystemInfoRaw(): Promise<runtime.ApiResponse<PublicSystemInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Info/Public`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSystemInfoFromJSON(jsonValue));
    }

    /**
     * Gets public information about the server.
     */
    async getPublicSystemInfo(): Promise<PublicSystemInfo> {
        const response = await this.getPublicSystemInfoRaw();
        return await response.value();
    }

    /**
     * Gets a list of available server log files.
     */
    async getServerLogsRaw(): Promise<runtime.ApiResponse<Array<LogFile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogFileFromJSON));
    }

    /**
     * Gets a list of available server log files.
     */
    async getServerLogs(): Promise<Array<LogFile>> {
        const response = await this.getServerLogsRaw();
        return await response.value();
    }

    /**
     * Gets information about the server.
     */
    async getSystemInfoRaw(): Promise<runtime.ApiResponse<SystemInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemInfoFromJSON(jsonValue));
    }

    /**
     * Gets information about the server.
     */
    async getSystemInfo(): Promise<SystemInfo> {
        const response = await this.getSystemInfoRaw();
        return await response.value();
    }

    /**
     * Gets wake on lan information.
     */
    async getWakeOnLanInfoRaw(): Promise<runtime.ApiResponse<Array<WakeOnLanInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/WakeOnLanInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WakeOnLanInfoFromJSON));
    }

    /**
     * Gets wake on lan information.
     */
    async getWakeOnLanInfo(): Promise<Array<WakeOnLanInfo>> {
        const response = await this.getWakeOnLanInfoRaw();
        return await response.value();
    }

    /**
     * Pings the system.
     */
    async postPingSystemRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Ping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Pings the system.
     */
    async postPingSystem(): Promise<string> {
        const response = await this.postPingSystemRaw();
        return await response.value();
    }

    /**
     * Restarts the application.
     */
    async restartApplicationRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Restart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restarts the application.
     */
    async restartApplication(): Promise<void> {
        await this.restartApplicationRaw();
    }

    /**
     * Shuts down the application.
     */
    async shutdownApplicationRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/System/Shutdown`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Shuts down the application.
     */
    async shutdownApplication(): Promise<void> {
        await this.shutdownApplicationRaw();
    }

}
