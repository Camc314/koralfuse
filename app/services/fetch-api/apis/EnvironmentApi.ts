/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DefaultDirectoryBrowserInfoDto,
    DefaultDirectoryBrowserInfoDtoFromJSON,
    DefaultDirectoryBrowserInfoDtoToJSON,
    FileSystemEntryInfo,
    FileSystemEntryInfoFromJSON,
    FileSystemEntryInfoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ValidatePathDto,
    ValidatePathDtoFromJSON,
    ValidatePathDtoToJSON,
} from '../models';

export interface GetDirectoryContentsRequest {
    path: string;
    includeFiles?: boolean;
    includeDirectories?: boolean;
}

export interface GetParentPathRequest {
    path: string;
}

export interface ValidatePathRequest {
    validatePathDto: ValidatePathDto;
}

/**
 * 
 */
export class EnvironmentApi extends runtime.BaseAPI {

    /**
     * Get Default directory browser.
     */
    async getDefaultDirectoryBrowserRaw(): Promise<runtime.ApiResponse<DefaultDirectoryBrowserInfoDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Environment/DefaultDirectoryBrowser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultDirectoryBrowserInfoDtoFromJSON(jsonValue));
    }

    /**
     * Get Default directory browser.
     */
    async getDefaultDirectoryBrowser(): Promise<DefaultDirectoryBrowserInfoDto> {
        const response = await this.getDefaultDirectoryBrowserRaw();
        return await response.value();
    }

    /**
     * Gets the contents of a given directory in the file system.
     */
    async getDirectoryContentsRaw(requestParameters: GetDirectoryContentsRequest): Promise<runtime.ApiResponse<Array<FileSystemEntryInfo>>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling getDirectoryContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.includeFiles !== undefined) {
            queryParameters['includeFiles'] = requestParameters.includeFiles;
        }

        if (requestParameters.includeDirectories !== undefined) {
            queryParameters['includeDirectories'] = requestParameters.includeDirectories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Environment/DirectoryContents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileSystemEntryInfoFromJSON));
    }

    /**
     * Gets the contents of a given directory in the file system.
     */
    async getDirectoryContents(requestParameters: GetDirectoryContentsRequest): Promise<Array<FileSystemEntryInfo>> {
        const response = await this.getDirectoryContentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available drives from the server\'s file system.
     */
    async getDrivesRaw(): Promise<runtime.ApiResponse<Array<FileSystemEntryInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Environment/Drives`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileSystemEntryInfoFromJSON));
    }

    /**
     * Gets available drives from the server\'s file system.
     */
    async getDrives(): Promise<Array<FileSystemEntryInfo>> {
        const response = await this.getDrivesRaw();
        return await response.value();
    }

    /**
     * Gets network paths.
     */
    async getNetworkSharesRaw(): Promise<runtime.ApiResponse<Array<FileSystemEntryInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Environment/NetworkShares`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileSystemEntryInfoFromJSON));
    }

    /**
     * Gets network paths.
     */
    async getNetworkShares(): Promise<Array<FileSystemEntryInfo>> {
        const response = await this.getNetworkSharesRaw();
        return await response.value();
    }

    /**
     * Gets the parent path of a given path.
     */
    async getParentPathRaw(requestParameters: GetParentPathRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling getParentPath.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Environment/ParentPath`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets the parent path of a given path.
     */
    async getParentPath(requestParameters: GetParentPathRequest): Promise<string> {
        const response = await this.getParentPathRaw(requestParameters);
        return await response.value();
    }

    /**
     * Validates path.
     */
    async validatePathRaw(requestParameters: ValidatePathRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.validatePathDto === null || requestParameters.validatePathDto === undefined) {
            throw new runtime.RequiredError('validatePathDto','Required parameter requestParameters.validatePathDto was null or undefined when calling validatePath.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Environment/ValidatePath`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidatePathDtoToJSON(requestParameters.validatePathDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validates path.
     */
    async validatePath(requestParameters: ValidatePathRequest): Promise<void> {
        await this.validatePathRaw(requestParameters);
    }

}
