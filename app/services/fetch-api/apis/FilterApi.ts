/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    QueryFilters,
    QueryFiltersFromJSON,
    QueryFiltersToJSON,
    QueryFiltersLegacy,
    QueryFiltersLegacyFromJSON,
    QueryFiltersLegacyToJSON,
} from '../models';

export interface GetQueryFiltersRequest {
    userId?: string | null;
    parentId?: string | null;
    includeItemTypes?: string | null;
    isAiring?: boolean | null;
    isMovie?: boolean | null;
    isSports?: boolean | null;
    isKids?: boolean | null;
    isNews?: boolean | null;
    isSeries?: boolean | null;
    recursive?: boolean | null;
}

export interface GetQueryFiltersLegacyRequest {
    userId?: string | null;
    parentId?: string | null;
    includeItemTypes?: string | null;
    mediaTypes?: string | null;
}

/**
 * 
 */
export class FilterApi extends runtime.BaseAPI {

    /**
     * Gets query filters.
     */
    async getQueryFiltersRaw(requestParameters: GetQueryFiltersRequest): Promise<runtime.ApiResponse<QueryFilters>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.parentId !== undefined) {
            queryParameters['parentId'] = requestParameters.parentId;
        }

        if (requestParameters.includeItemTypes !== undefined) {
            queryParameters['includeItemTypes'] = requestParameters.includeItemTypes;
        }

        if (requestParameters.isAiring !== undefined) {
            queryParameters['isAiring'] = requestParameters.isAiring;
        }

        if (requestParameters.isMovie !== undefined) {
            queryParameters['isMovie'] = requestParameters.isMovie;
        }

        if (requestParameters.isSports !== undefined) {
            queryParameters['isSports'] = requestParameters.isSports;
        }

        if (requestParameters.isKids !== undefined) {
            queryParameters['isKids'] = requestParameters.isKids;
        }

        if (requestParameters.isNews !== undefined) {
            queryParameters['isNews'] = requestParameters.isNews;
        }

        if (requestParameters.isSeries !== undefined) {
            queryParameters['isSeries'] = requestParameters.isSeries;
        }

        if (requestParameters.recursive !== undefined) {
            queryParameters['recursive'] = requestParameters.recursive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/Filters2`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryFiltersFromJSON(jsonValue));
    }

    /**
     * Gets query filters.
     */
    async getQueryFilters(requestParameters: GetQueryFiltersRequest): Promise<QueryFilters> {
        const response = await this.getQueryFiltersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets legacy query filters.
     */
    async getQueryFiltersLegacyRaw(requestParameters: GetQueryFiltersLegacyRequest): Promise<runtime.ApiResponse<QueryFiltersLegacy>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.parentId !== undefined) {
            queryParameters['parentId'] = requestParameters.parentId;
        }

        if (requestParameters.includeItemTypes !== undefined) {
            queryParameters['includeItemTypes'] = requestParameters.includeItemTypes;
        }

        if (requestParameters.mediaTypes !== undefined) {
            queryParameters['mediaTypes'] = requestParameters.mediaTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/Filters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryFiltersLegacyFromJSON(jsonValue));
    }

    /**
     * Gets legacy query filters.
     */
    async getQueryFiltersLegacy(requestParameters: GetQueryFiltersLegacyRequest): Promise<QueryFiltersLegacy> {
        const response = await this.getQueryFiltersLegacyRaw(requestParameters);
        return await response.value();
    }

}
