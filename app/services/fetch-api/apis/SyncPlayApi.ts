/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GroupInfoView,
    GroupInfoViewFromJSON,
    GroupInfoViewToJSON,
} from '../models';

export interface SyncPlayBufferingRequest {
    when?: Date;
    positionTicks?: number;
    bufferingDone?: boolean;
}

export interface SyncPlayGetGroupsRequest {
    filterItemId?: string | null;
}

export interface SyncPlayJoinGroupRequest {
    groupId: string;
}

export interface SyncPlayPingRequest {
    ping?: number;
}

export interface SyncPlaySeekRequest {
    positionTicks?: number;
}

/**
 * 
 */
export class SyncPlayApi extends runtime.BaseAPI {

    /**
     * Request group wait in SyncPlay group while buffering.
     */
    async syncPlayBufferingRaw(requestParameters: SyncPlayBufferingRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.when !== undefined) {
            queryParameters['when'] = (requestParameters.when as any).toISOString();
        }

        if (requestParameters.positionTicks !== undefined) {
            queryParameters['positionTicks'] = requestParameters.positionTicks;
        }

        if (requestParameters.bufferingDone !== undefined) {
            queryParameters['bufferingDone'] = requestParameters.bufferingDone;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/Buffering`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request group wait in SyncPlay group while buffering.
     */
    async syncPlayBuffering(requestParameters: SyncPlayBufferingRequest): Promise<void> {
        await this.syncPlayBufferingRaw(requestParameters);
    }

    /**
     * Create a new SyncPlay group.
     */
    async syncPlayCreateGroupRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/New`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new SyncPlay group.
     */
    async syncPlayCreateGroup(): Promise<void> {
        await this.syncPlayCreateGroupRaw();
    }

    /**
     * Gets all SyncPlay groups.
     */
    async syncPlayGetGroupsRaw(requestParameters: SyncPlayGetGroupsRequest): Promise<runtime.ApiResponse<Array<GroupInfoView>>> {
        const queryParameters: any = {};

        if (requestParameters.filterItemId !== undefined) {
            queryParameters['filterItemId'] = requestParameters.filterItemId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/List`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupInfoViewFromJSON));
    }

    /**
     * Gets all SyncPlay groups.
     */
    async syncPlayGetGroups(requestParameters: SyncPlayGetGroupsRequest): Promise<Array<GroupInfoView>> {
        const response = await this.syncPlayGetGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Join an existing SyncPlay group.
     */
    async syncPlayJoinGroupRaw(requestParameters: SyncPlayJoinGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling syncPlayJoinGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupId !== undefined) {
            queryParameters['groupId'] = requestParameters.groupId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/Join`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Join an existing SyncPlay group.
     */
    async syncPlayJoinGroup(requestParameters: SyncPlayJoinGroupRequest): Promise<void> {
        await this.syncPlayJoinGroupRaw(requestParameters);
    }

    /**
     * Leave the joined SyncPlay group.
     */
    async syncPlayLeaveGroupRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/Leave`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Leave the joined SyncPlay group.
     */
    async syncPlayLeaveGroup(): Promise<void> {
        await this.syncPlayLeaveGroupRaw();
    }

    /**
     * Request pause in SyncPlay group.
     */
    async syncPlayPauseRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/Pause`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request pause in SyncPlay group.
     */
    async syncPlayPause(): Promise<void> {
        await this.syncPlayPauseRaw();
    }

    /**
     * Update session ping.
     */
    async syncPlayPingRaw(requestParameters: SyncPlayPingRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.ping !== undefined) {
            queryParameters['ping'] = requestParameters.ping;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/Ping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update session ping.
     */
    async syncPlayPing(requestParameters: SyncPlayPingRequest): Promise<void> {
        await this.syncPlayPingRaw(requestParameters);
    }

    /**
     * Request play in SyncPlay group.
     */
    async syncPlayPlayRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/Play`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request play in SyncPlay group.
     */
    async syncPlayPlay(): Promise<void> {
        await this.syncPlayPlayRaw();
    }

    /**
     * Request seek in SyncPlay group.
     */
    async syncPlaySeekRaw(requestParameters: SyncPlaySeekRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.positionTicks !== undefined) {
            queryParameters['positionTicks'] = requestParameters.positionTicks;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/SyncPlay/Seek`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request seek in SyncPlay group.
     */
    async syncPlaySeek(requestParameters: SyncPlaySeekRequest): Promise<void> {
        await this.syncPlaySeekRaw(requestParameters);
    }

}
