/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AllThemeMediaResult,
    AllThemeMediaResultFromJSON,
    AllThemeMediaResultToJSON,
    BaseItemDto,
    BaseItemDtoFromJSON,
    BaseItemDtoToJSON,
    BaseItemDtoQueryResult,
    BaseItemDtoQueryResultFromJSON,
    BaseItemDtoQueryResultToJSON,
    ItemCounts,
    ItemCountsFromJSON,
    ItemCountsToJSON,
    LibraryOptionsResultDto,
    LibraryOptionsResultDtoFromJSON,
    LibraryOptionsResultDtoToJSON,
    MediaUpdateInfoDto,
    MediaUpdateInfoDtoFromJSON,
    MediaUpdateInfoDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ThemeMediaResult,
    ThemeMediaResultFromJSON,
    ThemeMediaResultToJSON,
} from '../models';

export interface DeleteItemRequest {
    itemId: string;
}

export interface DeleteItemsRequest {
    ids?: string | null;
}

export interface GetAncestorsRequest {
    itemId: string;
    userId?: string | null;
}

export interface GetCriticReviewsRequest {
    itemId: string;
}

export interface GetDownloadRequest {
    itemId: string;
}

export interface GetFileRequest {
    itemId: string;
}

export interface GetItemCountsRequest {
    userId?: string | null;
    isFavorite?: boolean | null;
}

export interface GetLibraryOptionsInfoRequest {
    libraryContentType?: string | null;
    isNewLibrary?: boolean;
}

export interface GetMediaFoldersRequest {
    isHidden?: boolean | null;
}

export interface GetSimilarAlbums2Request {
    itemId: string;
    excludeArtistIds?: string | null;
    userId?: string | null;
    limit?: number | null;
    fields?: string | null;
}

export interface GetSimilarArtists2Request {
    itemId: string;
    excludeArtistIds?: string | null;
    userId?: string | null;
    limit?: number | null;
    fields?: string | null;
}

export interface GetSimilarItemsRequest {
    itemId: string;
    excludeArtistIds?: string | null;
    userId?: string | null;
    limit?: number | null;
    fields?: string | null;
}

export interface GetSimilarMovies2Request {
    itemId: string;
    excludeArtistIds?: string | null;
    userId?: string | null;
    limit?: number | null;
    fields?: string | null;
}

export interface GetSimilarShows2Request {
    itemId: string;
    excludeArtistIds?: string | null;
    userId?: string | null;
    limit?: number | null;
    fields?: string | null;
}

export interface GetSimilarTrailers2Request {
    itemId: string;
    excludeArtistIds?: string | null;
    userId?: string | null;
    limit?: number | null;
    fields?: string | null;
}

export interface GetThemeMediaRequest {
    itemId: string;
    userId?: string | null;
    inheritFromParent?: boolean;
}

export interface GetThemeSongsRequest {
    itemId: string;
    userId?: string | null;
    inheritFromParent?: boolean;
}

export interface GetThemeVideosRequest {
    itemId: string;
    userId?: string | null;
    inheritFromParent?: boolean;
}

export interface PostAddedMoviesRequest {
    tmdbId?: string | null;
    imdbId?: string | null;
}

export interface PostAddedSeriesRequest {
    tvdbId?: string | null;
}

export interface PostUpdatedMediaRequest {
    mediaUpdateInfoDto: Array<MediaUpdateInfoDto>;
}

export interface PostUpdatedMoviesRequest {
    tmdbId?: string | null;
    imdbId?: string | null;
}

export interface PostUpdatedSeriesRequest {
    tvdbId?: string | null;
}

/**
 * 
 */
export class LibraryApi extends runtime.BaseAPI {

    /**
     * Deletes an item from the library and filesystem.
     */
    async deleteItemRaw(requestParameters: DeleteItemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an item from the library and filesystem.
     */
    async deleteItem(requestParameters: DeleteItemRequest): Promise<void> {
        await this.deleteItemRaw(requestParameters);
    }

    /**
     * Deletes items from the library and filesystem.
     */
    async deleteItemsRaw(requestParameters: DeleteItemsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes items from the library and filesystem.
     */
    async deleteItems(requestParameters: DeleteItemsRequest): Promise<void> {
        await this.deleteItemsRaw(requestParameters);
    }

    /**
     * Gets all parents of an item.
     */
    async getAncestorsRaw(requestParameters: GetAncestorsRequest): Promise<runtime.ApiResponse<Array<BaseItemDto>>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getAncestors.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Ancestors`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BaseItemDtoFromJSON));
    }

    /**
     * Gets all parents of an item.
     */
    async getAncestors(requestParameters: GetAncestorsRequest): Promise<Array<BaseItemDto>> {
        const response = await this.getAncestorsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets critic review for an item.
     */
    async getCriticReviewsRaw(requestParameters: GetCriticReviewsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getCriticReviews.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/CriticReviews`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets critic review for an item.
     */
    async getCriticReviews(requestParameters: GetCriticReviewsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getCriticReviewsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Downloads item media.
     */
    async getDownloadRaw(requestParameters: GetDownloadRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getDownload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Download`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Downloads item media.
     */
    async getDownload(requestParameters: GetDownloadRequest): Promise<any> {
        const response = await this.getDownloadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the original file of an item.
     */
    async getFileRaw(requestParameters: GetFileRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/File`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get the original file of an item.
     */
    async getFile(requestParameters: GetFileRequest): Promise<any> {
        const response = await this.getFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get item counts.
     */
    async getItemCountsRaw(requestParameters: GetItemCountsRequest): Promise<runtime.ApiResponse<ItemCounts>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.isFavorite !== undefined) {
            queryParameters['isFavorite'] = requestParameters.isFavorite;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/Counts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemCountsFromJSON(jsonValue));
    }

    /**
     * Get item counts.
     */
    async getItemCounts(requestParameters: GetItemCountsRequest): Promise<ItemCounts> {
        const response = await this.getItemCountsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the library options info.
     */
    async getLibraryOptionsInfoRaw(requestParameters: GetLibraryOptionsInfoRequest): Promise<runtime.ApiResponse<LibraryOptionsResultDto>> {
        const queryParameters: any = {};

        if (requestParameters.libraryContentType !== undefined) {
            queryParameters['libraryContentType'] = requestParameters.libraryContentType;
        }

        if (requestParameters.isNewLibrary !== undefined) {
            queryParameters['isNewLibrary'] = requestParameters.isNewLibrary;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Libraries/AvailableOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryOptionsResultDtoFromJSON(jsonValue));
    }

    /**
     * Gets the library options info.
     */
    async getLibraryOptionsInfo(requestParameters: GetLibraryOptionsInfoRequest): Promise<LibraryOptionsResultDto> {
        const response = await this.getLibraryOptionsInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets all user media folders.
     */
    async getMediaFoldersRaw(requestParameters: GetMediaFoldersRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.isHidden !== undefined) {
            queryParameters['isHidden'] = requestParameters.isHidden;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/MediaFolders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets all user media folders.
     */
    async getMediaFolders(requestParameters: GetMediaFoldersRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getMediaFoldersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a list of physical paths from virtual folders.
     */
    async getPhysicalPathsRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/PhysicalPaths`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets a list of physical paths from virtual folders.
     */
    async getPhysicalPaths(): Promise<Array<string>> {
        const response = await this.getPhysicalPathsRaw();
        return await response.value();
    }

    /**
     * Gets similar items.
     */
    async getSimilarAlbums2Raw(requestParameters: GetSimilarAlbums2Request): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getSimilarAlbums2.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeArtistIds !== undefined) {
            queryParameters['excludeArtistIds'] = requestParameters.excludeArtistIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Albums/{itemId}/Similar`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets similar items.
     */
    async getSimilarAlbums2(requestParameters: GetSimilarAlbums2Request): Promise<BaseItemDtoQueryResult> {
        const response = await this.getSimilarAlbums2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets similar items.
     */
    async getSimilarArtists2Raw(requestParameters: GetSimilarArtists2Request): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getSimilarArtists2.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeArtistIds !== undefined) {
            queryParameters['excludeArtistIds'] = requestParameters.excludeArtistIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Artists/{itemId}/Similar`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets similar items.
     */
    async getSimilarArtists2(requestParameters: GetSimilarArtists2Request): Promise<BaseItemDtoQueryResult> {
        const response = await this.getSimilarArtists2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets similar items.
     */
    async getSimilarItemsRaw(requestParameters: GetSimilarItemsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getSimilarItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeArtistIds !== undefined) {
            queryParameters['excludeArtistIds'] = requestParameters.excludeArtistIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Similar`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets similar items.
     */
    async getSimilarItems(requestParameters: GetSimilarItemsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getSimilarItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets similar items.
     */
    async getSimilarMovies2Raw(requestParameters: GetSimilarMovies2Request): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getSimilarMovies2.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeArtistIds !== undefined) {
            queryParameters['excludeArtistIds'] = requestParameters.excludeArtistIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Movies/{itemId}/Similar`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets similar items.
     */
    async getSimilarMovies2(requestParameters: GetSimilarMovies2Request): Promise<BaseItemDtoQueryResult> {
        const response = await this.getSimilarMovies2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets similar items.
     */
    async getSimilarShows2Raw(requestParameters: GetSimilarShows2Request): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getSimilarShows2.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeArtistIds !== undefined) {
            queryParameters['excludeArtistIds'] = requestParameters.excludeArtistIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Shows/{itemId}/Similar`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets similar items.
     */
    async getSimilarShows2(requestParameters: GetSimilarShows2Request): Promise<BaseItemDtoQueryResult> {
        const response = await this.getSimilarShows2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets similar items.
     */
    async getSimilarTrailers2Raw(requestParameters: GetSimilarTrailers2Request): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getSimilarTrailers2.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeArtistIds !== undefined) {
            queryParameters['excludeArtistIds'] = requestParameters.excludeArtistIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Trailers/{itemId}/Similar`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets similar items.
     */
    async getSimilarTrailers2(requestParameters: GetSimilarTrailers2Request): Promise<BaseItemDtoQueryResult> {
        const response = await this.getSimilarTrailers2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get theme songs and videos for an item.
     */
    async getThemeMediaRaw(requestParameters: GetThemeMediaRequest): Promise<runtime.ApiResponse<AllThemeMediaResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getThemeMedia.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.inheritFromParent !== undefined) {
            queryParameters['inheritFromParent'] = requestParameters.inheritFromParent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/ThemeMedia`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AllThemeMediaResultFromJSON(jsonValue));
    }

    /**
     * Get theme songs and videos for an item.
     */
    async getThemeMedia(requestParameters: GetThemeMediaRequest): Promise<AllThemeMediaResult> {
        const response = await this.getThemeMediaRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get theme songs for an item.
     */
    async getThemeSongsRaw(requestParameters: GetThemeSongsRequest): Promise<runtime.ApiResponse<ThemeMediaResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getThemeSongs.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.inheritFromParent !== undefined) {
            queryParameters['inheritFromParent'] = requestParameters.inheritFromParent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/ThemeSongs`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeMediaResultFromJSON(jsonValue));
    }

    /**
     * Get theme songs for an item.
     */
    async getThemeSongs(requestParameters: GetThemeSongsRequest): Promise<ThemeMediaResult> {
        const response = await this.getThemeSongsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get theme videos for an item.
     */
    async getThemeVideosRaw(requestParameters: GetThemeVideosRequest): Promise<runtime.ApiResponse<ThemeMediaResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getThemeVideos.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.inheritFromParent !== undefined) {
            queryParameters['inheritFromParent'] = requestParameters.inheritFromParent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/ThemeVideos`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeMediaResultFromJSON(jsonValue));
    }

    /**
     * Get theme videos for an item.
     */
    async getThemeVideos(requestParameters: GetThemeVideosRequest): Promise<ThemeMediaResult> {
        const response = await this.getThemeVideosRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reports that new movies have been added by an external source.
     */
    async postAddedMoviesRaw(requestParameters: PostAddedMoviesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.tmdbId !== undefined) {
            queryParameters['tmdbId'] = requestParameters.tmdbId;
        }

        if (requestParameters.imdbId !== undefined) {
            queryParameters['imdbId'] = requestParameters.imdbId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/Movies/Added`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports that new movies have been added by an external source.
     */
    async postAddedMovies(requestParameters: PostAddedMoviesRequest): Promise<void> {
        await this.postAddedMoviesRaw(requestParameters);
    }

    /**
     * Reports that new episodes of a series have been added by an external source.
     */
    async postAddedSeriesRaw(requestParameters: PostAddedSeriesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.tvdbId !== undefined) {
            queryParameters['tvdbId'] = requestParameters.tvdbId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/Series/Added`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports that new episodes of a series have been added by an external source.
     */
    async postAddedSeries(requestParameters: PostAddedSeriesRequest): Promise<void> {
        await this.postAddedSeriesRaw(requestParameters);
    }

    /**
     * Reports that new movies have been added by an external source.
     */
    async postUpdatedMediaRaw(requestParameters: PostUpdatedMediaRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.mediaUpdateInfoDto === null || requestParameters.mediaUpdateInfoDto === undefined) {
            throw new runtime.RequiredError('mediaUpdateInfoDto','Required parameter requestParameters.mediaUpdateInfoDto was null or undefined when calling postUpdatedMedia.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/Media/Updated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.mediaUpdateInfoDto.map(MediaUpdateInfoDtoToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports that new movies have been added by an external source.
     */
    async postUpdatedMedia(requestParameters: PostUpdatedMediaRequest): Promise<void> {
        await this.postUpdatedMediaRaw(requestParameters);
    }

    /**
     * Reports that new movies have been added by an external source.
     */
    async postUpdatedMoviesRaw(requestParameters: PostUpdatedMoviesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.tmdbId !== undefined) {
            queryParameters['tmdbId'] = requestParameters.tmdbId;
        }

        if (requestParameters.imdbId !== undefined) {
            queryParameters['imdbId'] = requestParameters.imdbId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/Movies/Updated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports that new movies have been added by an external source.
     */
    async postUpdatedMovies(requestParameters: PostUpdatedMoviesRequest): Promise<void> {
        await this.postUpdatedMoviesRaw(requestParameters);
    }

    /**
     * Reports that new episodes of a series have been added by an external source.
     */
    async postUpdatedSeriesRaw(requestParameters: PostUpdatedSeriesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.tvdbId !== undefined) {
            queryParameters['tvdbId'] = requestParameters.tvdbId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/Series/Updated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports that new episodes of a series have been added by an external source.
     */
    async postUpdatedSeries(requestParameters: PostUpdatedSeriesRequest): Promise<void> {
        await this.postUpdatedSeriesRaw(requestParameters);
    }

    /**
     * Starts a library scan.
     */
    async refreshLibraryRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/Refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts a library scan.
     */
    async refreshLibrary(): Promise<void> {
        await this.refreshLibraryRaw();
    }

}
