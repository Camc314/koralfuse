/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClientCapabilities,
    ClientCapabilitiesFromJSON,
    ClientCapabilitiesToJSON,
    GeneralCommand,
    GeneralCommandFromJSON,
    GeneralCommandToJSON,
    GeneralCommandType,
    GeneralCommandTypeFromJSON,
    GeneralCommandTypeToJSON,
    NameIdPair,
    NameIdPairFromJSON,
    NameIdPairToJSON,
    PlayCommand,
    PlayCommandFromJSON,
    PlayCommandToJSON,
    PlaystateCommand,
    PlaystateCommandFromJSON,
    PlaystateCommandToJSON,
    SessionInfo,
    SessionInfoFromJSON,
    SessionInfoToJSON,
} from '../models';

export interface AddUserToSessionRequest {
    sessionId: string;
    userId: string;
}

export interface DisplayContentRequest {
    sessionId: string;
    itemType: string;
    itemId: string;
    itemName: string;
}

export interface GetSessionsRequest {
    controllableByUserId?: string | null;
    deviceId?: string | null;
    activeWithinSeconds?: number | null;
}

export interface PlayRequest {
    sessionId: string;
    playCommand: PlayCommand;
    itemIds: string;
    startPositionTicks?: number | null;
}

export interface PostCapabilitiesRequest {
    id?: string | null;
    playableMediaTypes?: string | null;
    supportedCommands?: string | null;
    supportsMediaControl?: boolean;
    supportsSync?: boolean;
    supportsPersistentIdentifier?: boolean;
}

export interface PostFullCapabilitiesRequest {
    clientCapabilities: ClientCapabilities;
    id?: string | null;
}

export interface RemoveUserFromSessionRequest {
    sessionId: string;
    userId: string;
}

export interface ReportViewingRequest {
    itemId: string;
    sessionId?: string | null;
}

export interface SendFullGeneralCommandRequest {
    sessionId: string;
    generalCommand: GeneralCommand;
}

export interface SendGeneralCommandRequest {
    sessionId: string;
    command: GeneralCommandType;
}

export interface SendMessageCommandRequest {
    sessionId: string;
    text: string;
    header?: string | null;
    timeoutMs?: number | null;
}

export interface SendPlaystateCommandRequest {
    sessionId: string;
    command: PlaystateCommand;
    seekPositionTicks?: number | null;
    controllingUserId?: string | null;
}

export interface SendSystemCommandRequest {
    sessionId: string;
    command: GeneralCommandType;
}

/**
 * 
 */
export class SessionApi extends runtime.BaseAPI {

    /**
     * Adds an additional user to a session.
     */
    async addUserToSessionRaw(requestParameters: AddUserToSessionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling addUserToSession.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserToSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/User/{userId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds an additional user to a session.
     */
    async addUserToSession(requestParameters: AddUserToSessionRequest): Promise<void> {
        await this.addUserToSessionRaw(requestParameters);
    }

    /**
     * Instructs a session to browse to an item or view.
     */
    async displayContentRaw(requestParameters: DisplayContentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling displayContent.');
        }

        if (requestParameters.itemType === null || requestParameters.itemType === undefined) {
            throw new runtime.RequiredError('itemType','Required parameter requestParameters.itemType was null or undefined when calling displayContent.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling displayContent.');
        }

        if (requestParameters.itemName === null || requestParameters.itemName === undefined) {
            throw new runtime.RequiredError('itemName','Required parameter requestParameters.itemName was null or undefined when calling displayContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.itemType !== undefined) {
            queryParameters['itemType'] = requestParameters.itemType;
        }

        if (requestParameters.itemId !== undefined) {
            queryParameters['itemId'] = requestParameters.itemId;
        }

        if (requestParameters.itemName !== undefined) {
            queryParameters['itemName'] = requestParameters.itemName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/Viewing`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Instructs a session to browse to an item or view.
     */
    async displayContent(requestParameters: DisplayContentRequest): Promise<void> {
        await this.displayContentRaw(requestParameters);
    }

    /**
     * Get all auth providers.
     */
    async getAuthProvidersRaw(): Promise<runtime.ApiResponse<Array<NameIdPair>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Auth/Providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NameIdPairFromJSON));
    }

    /**
     * Get all auth providers.
     */
    async getAuthProviders(): Promise<Array<NameIdPair>> {
        const response = await this.getAuthProvidersRaw();
        return await response.value();
    }

    /**
     * Get all password reset providers.
     */
    async getPasswordResetProvidersRaw(): Promise<runtime.ApiResponse<Array<NameIdPair>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Auth/PasswordResetProviders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NameIdPairFromJSON));
    }

    /**
     * Get all password reset providers.
     */
    async getPasswordResetProviders(): Promise<Array<NameIdPair>> {
        const response = await this.getPasswordResetProvidersRaw();
        return await response.value();
    }

    /**
     * Gets a list of sessions.
     */
    async getSessionsRaw(requestParameters: GetSessionsRequest): Promise<runtime.ApiResponse<Array<SessionInfo>>> {
        const queryParameters: any = {};

        if (requestParameters.controllableByUserId !== undefined) {
            queryParameters['controllableByUserId'] = requestParameters.controllableByUserId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.activeWithinSeconds !== undefined) {
            queryParameters['activeWithinSeconds'] = requestParameters.activeWithinSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionInfoFromJSON));
    }

    /**
     * Gets a list of sessions.
     */
    async getSessions(requestParameters: GetSessionsRequest): Promise<Array<SessionInfo>> {
        const response = await this.getSessionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Instructs a session to play an item.
     */
    async playRaw(requestParameters: PlayRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling play.');
        }

        if (requestParameters.playCommand === null || requestParameters.playCommand === undefined) {
            throw new runtime.RequiredError('playCommand','Required parameter requestParameters.playCommand was null or undefined when calling play.');
        }

        if (requestParameters.itemIds === null || requestParameters.itemIds === undefined) {
            throw new runtime.RequiredError('itemIds','Required parameter requestParameters.itemIds was null or undefined when calling play.');
        }

        const queryParameters: any = {};

        if (requestParameters.playCommand !== undefined) {
            queryParameters['playCommand'] = requestParameters.playCommand;
        }

        if (requestParameters.itemIds !== undefined) {
            queryParameters['itemIds'] = requestParameters.itemIds;
        }

        if (requestParameters.startPositionTicks !== undefined) {
            queryParameters['startPositionTicks'] = requestParameters.startPositionTicks;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/Playing`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Instructs a session to play an item.
     */
    async play(requestParameters: PlayRequest): Promise<void> {
        await this.playRaw(requestParameters);
    }

    /**
     * Updates capabilities for a device.
     */
    async postCapabilitiesRaw(requestParameters: PostCapabilitiesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.playableMediaTypes !== undefined) {
            queryParameters['playableMediaTypes'] = requestParameters.playableMediaTypes;
        }

        if (requestParameters.supportedCommands !== undefined) {
            queryParameters['supportedCommands'] = requestParameters.supportedCommands;
        }

        if (requestParameters.supportsMediaControl !== undefined) {
            queryParameters['supportsMediaControl'] = requestParameters.supportsMediaControl;
        }

        if (requestParameters.supportsSync !== undefined) {
            queryParameters['supportsSync'] = requestParameters.supportsSync;
        }

        if (requestParameters.supportsPersistentIdentifier !== undefined) {
            queryParameters['supportsPersistentIdentifier'] = requestParameters.supportsPersistentIdentifier;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/Capabilities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates capabilities for a device.
     */
    async postCapabilities(requestParameters: PostCapabilitiesRequest): Promise<void> {
        await this.postCapabilitiesRaw(requestParameters);
    }

    /**
     * Updates capabilities for a device.
     */
    async postFullCapabilitiesRaw(requestParameters: PostFullCapabilitiesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientCapabilities === null || requestParameters.clientCapabilities === undefined) {
            throw new runtime.RequiredError('clientCapabilities','Required parameter requestParameters.clientCapabilities was null or undefined when calling postFullCapabilities.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/Capabilities/Full`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientCapabilitiesToJSON(requestParameters.clientCapabilities),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates capabilities for a device.
     */
    async postFullCapabilities(requestParameters: PostFullCapabilitiesRequest): Promise<void> {
        await this.postFullCapabilitiesRaw(requestParameters);
    }

    /**
     * Removes an additional user from a session.
     */
    async removeUserFromSessionRaw(requestParameters: RemoveUserFromSessionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling removeUserFromSession.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUserFromSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/User/{userId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes an additional user from a session.
     */
    async removeUserFromSession(requestParameters: RemoveUserFromSessionRequest): Promise<void> {
        await this.removeUserFromSessionRaw(requestParameters);
    }

    /**
     * Reports that a session has ended.
     */
    async reportSessionEndedRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/Logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports that a session has ended.
     */
    async reportSessionEnded(): Promise<void> {
        await this.reportSessionEndedRaw();
    }

    /**
     * Reports that a session is viewing an item.
     */
    async reportViewingRaw(requestParameters: ReportViewingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling reportViewing.');
        }

        const queryParameters: any = {};

        if (requestParameters.sessionId !== undefined) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        if (requestParameters.itemId !== undefined) {
            queryParameters['itemId'] = requestParameters.itemId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/Viewing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reports that a session is viewing an item.
     */
    async reportViewing(requestParameters: ReportViewingRequest): Promise<void> {
        await this.reportViewingRaw(requestParameters);
    }

    /**
     * Issues a full general command to a client.
     */
    async sendFullGeneralCommandRaw(requestParameters: SendFullGeneralCommandRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling sendFullGeneralCommand.');
        }

        if (requestParameters.generalCommand === null || requestParameters.generalCommand === undefined) {
            throw new runtime.RequiredError('generalCommand','Required parameter requestParameters.generalCommand was null or undefined when calling sendFullGeneralCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/Command`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeneralCommandToJSON(requestParameters.generalCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Issues a full general command to a client.
     */
    async sendFullGeneralCommand(requestParameters: SendFullGeneralCommandRequest): Promise<void> {
        await this.sendFullGeneralCommandRaw(requestParameters);
    }

    /**
     * Issues a general command to a client.
     */
    async sendGeneralCommandRaw(requestParameters: SendGeneralCommandRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling sendGeneralCommand.');
        }

        if (requestParameters.command === null || requestParameters.command === undefined) {
            throw new runtime.RequiredError('command','Required parameter requestParameters.command was null or undefined when calling sendGeneralCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/Command/{command}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"command"}}`, encodeURIComponent(String(requestParameters.command))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Issues a general command to a client.
     */
    async sendGeneralCommand(requestParameters: SendGeneralCommandRequest): Promise<void> {
        await this.sendGeneralCommandRaw(requestParameters);
    }

    /**
     * Issues a command to a client to display a message to the user.
     */
    async sendMessageCommandRaw(requestParameters: SendMessageCommandRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling sendMessageCommand.');
        }

        if (requestParameters.text === null || requestParameters.text === undefined) {
            throw new runtime.RequiredError('text','Required parameter requestParameters.text was null or undefined when calling sendMessageCommand.');
        }

        const queryParameters: any = {};

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.header !== undefined) {
            queryParameters['header'] = requestParameters.header;
        }

        if (requestParameters.timeoutMs !== undefined) {
            queryParameters['timeoutMs'] = requestParameters.timeoutMs;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/Message`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Issues a command to a client to display a message to the user.
     */
    async sendMessageCommand(requestParameters: SendMessageCommandRequest): Promise<void> {
        await this.sendMessageCommandRaw(requestParameters);
    }

    /**
     * Issues a playstate command to a client.
     */
    async sendPlaystateCommandRaw(requestParameters: SendPlaystateCommandRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling sendPlaystateCommand.');
        }

        if (requestParameters.command === null || requestParameters.command === undefined) {
            throw new runtime.RequiredError('command','Required parameter requestParameters.command was null or undefined when calling sendPlaystateCommand.');
        }

        const queryParameters: any = {};

        if (requestParameters.seekPositionTicks !== undefined) {
            queryParameters['seekPositionTicks'] = requestParameters.seekPositionTicks;
        }

        if (requestParameters.controllingUserId !== undefined) {
            queryParameters['controllingUserId'] = requestParameters.controllingUserId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/Playing/{command}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"command"}}`, encodeURIComponent(String(requestParameters.command))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Issues a playstate command to a client.
     */
    async sendPlaystateCommand(requestParameters: SendPlaystateCommandRequest): Promise<void> {
        await this.sendPlaystateCommandRaw(requestParameters);
    }

    /**
     * Issues a system command to a client.
     */
    async sendSystemCommandRaw(requestParameters: SendSystemCommandRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling sendSystemCommand.');
        }

        if (requestParameters.command === null || requestParameters.command === undefined) {
            throw new runtime.RequiredError('command','Required parameter requestParameters.command was null or undefined when calling sendSystemCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Sessions/{sessionId}/System/{command}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"command"}}`, encodeURIComponent(String(requestParameters.command))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Issues a system command to a client.
     */
    async sendSystemCommand(requestParameters: SendSystemCommandRequest): Promise<void> {
        await this.sendSystemCommandRaw(requestParameters);
    }

}
