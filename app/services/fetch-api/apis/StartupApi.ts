/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StartupConfigurationDto,
    StartupConfigurationDtoFromJSON,
    StartupConfigurationDtoToJSON,
    StartupRemoteAccessDto,
    StartupRemoteAccessDtoFromJSON,
    StartupRemoteAccessDtoToJSON,
    StartupUserDto,
    StartupUserDtoFromJSON,
    StartupUserDtoToJSON,
} from '../models';

export interface SetRemoteAccessRequest {
    startupRemoteAccessDto: StartupRemoteAccessDto;
}

export interface UpdateInitialConfigurationRequest {
    startupConfigurationDto: StartupConfigurationDto;
}

export interface UpdateStartupUserRequest {
    startupUserDto?: StartupUserDto;
}

/**
 * 
 */
export class StartupApi extends runtime.BaseAPI {

    /**
     * Completes the startup wizard.
     */
    async completeWizardRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Startup/Complete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Completes the startup wizard.
     */
    async completeWizard(): Promise<void> {
        await this.completeWizardRaw();
    }

    /**
     * Gets the first user.
     */
    async getFirstUserRaw(): Promise<runtime.ApiResponse<StartupUserDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Startup/User`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StartupUserDtoFromJSON(jsonValue));
    }

    /**
     * Gets the first user.
     */
    async getFirstUser(): Promise<StartupUserDto> {
        const response = await this.getFirstUserRaw();
        return await response.value();
    }

    /**
     * Gets the first user.
     */
    async getFirstUser2Raw(): Promise<runtime.ApiResponse<StartupUserDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Startup/FirstUser`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StartupUserDtoFromJSON(jsonValue));
    }

    /**
     * Gets the first user.
     */
    async getFirstUser2(): Promise<StartupUserDto> {
        const response = await this.getFirstUser2Raw();
        return await response.value();
    }

    /**
     * Gets the initial startup wizard configuration.
     */
    async getStartupConfigurationRaw(): Promise<runtime.ApiResponse<StartupConfigurationDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Startup/Configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StartupConfigurationDtoFromJSON(jsonValue));
    }

    /**
     * Gets the initial startup wizard configuration.
     */
    async getStartupConfiguration(): Promise<StartupConfigurationDto> {
        const response = await this.getStartupConfigurationRaw();
        return await response.value();
    }

    /**
     * Sets remote access and UPnP.
     */
    async setRemoteAccessRaw(requestParameters: SetRemoteAccessRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.startupRemoteAccessDto === null || requestParameters.startupRemoteAccessDto === undefined) {
            throw new runtime.RequiredError('startupRemoteAccessDto','Required parameter requestParameters.startupRemoteAccessDto was null or undefined when calling setRemoteAccess.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Startup/RemoteAccess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartupRemoteAccessDtoToJSON(requestParameters.startupRemoteAccessDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets remote access and UPnP.
     */
    async setRemoteAccess(requestParameters: SetRemoteAccessRequest): Promise<void> {
        await this.setRemoteAccessRaw(requestParameters);
    }

    /**
     * Sets the initial startup wizard configuration.
     */
    async updateInitialConfigurationRaw(requestParameters: UpdateInitialConfigurationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.startupConfigurationDto === null || requestParameters.startupConfigurationDto === undefined) {
            throw new runtime.RequiredError('startupConfigurationDto','Required parameter requestParameters.startupConfigurationDto was null or undefined when calling updateInitialConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Startup/Configuration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartupConfigurationDtoToJSON(requestParameters.startupConfigurationDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the initial startup wizard configuration.
     */
    async updateInitialConfiguration(requestParameters: UpdateInitialConfigurationRequest): Promise<void> {
        await this.updateInitialConfigurationRaw(requestParameters);
    }

    /**
     * Sets the user name and password.
     */
    async updateStartupUserRaw(requestParameters: UpdateStartupUserRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Startup/User`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartupUserDtoToJSON(requestParameters.startupUserDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the user name and password.
     */
    async updateStartupUser(requestParameters: UpdateStartupUserRequest): Promise<void> {
        await this.updateStartupUserRaw(requestParameters);
    }

}
