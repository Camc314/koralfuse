/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MetadataRefreshMode,
    MetadataRefreshModeFromJSON,
    MetadataRefreshModeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface PostRequest {
    itemId: string;
    metadataRefreshMode?: MetadataRefreshMode;
    imageRefreshMode?: MetadataRefreshMode;
    replaceAllMetadata?: boolean;
    replaceAllImages?: boolean;
}

/**
 * 
 */
export class ItemRefreshApi extends runtime.BaseAPI {

    /**
     * Refreshes metadata for an item.
     */
    async postRaw(requestParameters: PostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling post.');
        }

        const queryParameters: any = {};

        if (requestParameters.metadataRefreshMode !== undefined) {
            queryParameters['metadataRefreshMode'] = requestParameters.metadataRefreshMode;
        }

        if (requestParameters.imageRefreshMode !== undefined) {
            queryParameters['imageRefreshMode'] = requestParameters.imageRefreshMode;
        }

        if (requestParameters.replaceAllMetadata !== undefined) {
            queryParameters['replaceAllMetadata'] = requestParameters.replaceAllMetadata;
        }

        if (requestParameters.replaceAllImages !== undefined) {
            queryParameters['replaceAllImages'] = requestParameters.replaceAllImages;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Refresh`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Refreshes metadata for an item.
     */
    async post(requestParameters: PostRequest): Promise<void> {
        await this.postRaw(requestParameters);
    }

}
