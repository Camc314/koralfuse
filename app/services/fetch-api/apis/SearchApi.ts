/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SearchHintResult,
    SearchHintResultFromJSON,
    SearchHintResultToJSON,
} from '../models';

export interface GetRequest {
    searchTerm: string;
    startIndex?: number | null;
    limit?: number | null;
    userId?: string | null;
    includeItemTypes?: string | null;
    excludeItemTypes?: string | null;
    mediaTypes?: string | null;
    parentId?: string | null;
    isMovie?: boolean | null;
    isSeries?: boolean | null;
    isNews?: boolean | null;
    isKids?: boolean | null;
    isSports?: boolean | null;
    includePeople?: boolean;
    includeMedia?: boolean;
    includeGenres?: boolean;
    includeStudios?: boolean;
    includeArtists?: boolean;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Gets the search hint result.
     */
    async getRaw(requestParameters: GetRequest): Promise<runtime.ApiResponse<SearchHintResult>> {
        if (requestParameters.searchTerm === null || requestParameters.searchTerm === undefined) {
            throw new runtime.RequiredError('searchTerm','Required parameter requestParameters.searchTerm was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.searchTerm !== undefined) {
            queryParameters['searchTerm'] = requestParameters.searchTerm;
        }

        if (requestParameters.includeItemTypes !== undefined) {
            queryParameters['includeItemTypes'] = requestParameters.includeItemTypes;
        }

        if (requestParameters.excludeItemTypes !== undefined) {
            queryParameters['excludeItemTypes'] = requestParameters.excludeItemTypes;
        }

        if (requestParameters.mediaTypes !== undefined) {
            queryParameters['mediaTypes'] = requestParameters.mediaTypes;
        }

        if (requestParameters.parentId !== undefined) {
            queryParameters['parentId'] = requestParameters.parentId;
        }

        if (requestParameters.isMovie !== undefined) {
            queryParameters['isMovie'] = requestParameters.isMovie;
        }

        if (requestParameters.isSeries !== undefined) {
            queryParameters['isSeries'] = requestParameters.isSeries;
        }

        if (requestParameters.isNews !== undefined) {
            queryParameters['isNews'] = requestParameters.isNews;
        }

        if (requestParameters.isKids !== undefined) {
            queryParameters['isKids'] = requestParameters.isKids;
        }

        if (requestParameters.isSports !== undefined) {
            queryParameters['isSports'] = requestParameters.isSports;
        }

        if (requestParameters.includePeople !== undefined) {
            queryParameters['includePeople'] = requestParameters.includePeople;
        }

        if (requestParameters.includeMedia !== undefined) {
            queryParameters['includeMedia'] = requestParameters.includeMedia;
        }

        if (requestParameters.includeGenres !== undefined) {
            queryParameters['includeGenres'] = requestParameters.includeGenres;
        }

        if (requestParameters.includeStudios !== undefined) {
            queryParameters['includeStudios'] = requestParameters.includeStudios;
        }

        if (requestParameters.includeArtists !== undefined) {
            queryParameters['includeArtists'] = requestParameters.includeArtists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Search/Hints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchHintResultFromJSON(jsonValue));
    }

    /**
     * Gets the search hint result.
     */
    async get(requestParameters: GetRequest): Promise<SearchHintResult> {
        const response = await this.getRaw(requestParameters);
        return await response.value();
    }

}
