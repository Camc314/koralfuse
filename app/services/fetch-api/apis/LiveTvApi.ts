/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BaseItemDto,
    BaseItemDtoFromJSON,
    BaseItemDtoToJSON,
    BaseItemDtoQueryResult,
    BaseItemDtoQueryResultFromJSON,
    BaseItemDtoQueryResultToJSON,
    ChannelMappingOptionsDto,
    ChannelMappingOptionsDtoFromJSON,
    ChannelMappingOptionsDtoToJSON,
    ChannelType,
    ChannelTypeFromJSON,
    ChannelTypeToJSON,
    GetProgramsDto,
    GetProgramsDtoFromJSON,
    GetProgramsDtoToJSON,
    GuideInfo,
    GuideInfoFromJSON,
    GuideInfoToJSON,
    ImageType,
    ImageTypeFromJSON,
    ImageTypeToJSON,
    ItemFields,
    ItemFieldsFromJSON,
    ItemFieldsToJSON,
    ListingsProviderInfo,
    ListingsProviderInfoFromJSON,
    ListingsProviderInfoToJSON,
    LiveTvInfo,
    LiveTvInfoFromJSON,
    LiveTvInfoToJSON,
    NameIdPair,
    NameIdPairFromJSON,
    NameIdPairToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RecordingStatus,
    RecordingStatusFromJSON,
    RecordingStatusToJSON,
    SeriesTimerInfoDto,
    SeriesTimerInfoDtoFromJSON,
    SeriesTimerInfoDtoToJSON,
    SeriesTimerInfoDtoQueryResult,
    SeriesTimerInfoDtoQueryResultFromJSON,
    SeriesTimerInfoDtoQueryResultToJSON,
    SortOrder,
    SortOrderFromJSON,
    SortOrderToJSON,
    TimerInfoDto,
    TimerInfoDtoFromJSON,
    TimerInfoDtoToJSON,
    TimerInfoDtoQueryResult,
    TimerInfoDtoQueryResultFromJSON,
    TimerInfoDtoQueryResultToJSON,
    TunerChannelMapping,
    TunerChannelMappingFromJSON,
    TunerChannelMappingToJSON,
    TunerHostInfo,
    TunerHostInfoFromJSON,
    TunerHostInfoToJSON,
} from '../models';

export interface AddListingProviderRequest {
    pw?: string | null;
    validateListings?: boolean;
    validateLogin?: boolean;
    listingsProviderInfo?: ListingsProviderInfo;
}

export interface AddTunerHostRequest {
    tunerHostInfo?: TunerHostInfo;
}

export interface CancelSeriesTimerRequest {
    timerId: string;
}

export interface CancelTimerRequest {
    timerId: string;
}

export interface CreateSeriesTimerRequest {
    seriesTimerInfoDto?: SeriesTimerInfoDto;
}

export interface CreateTimerRequest {
    timerInfoDto?: TimerInfoDto;
}

export interface DeleteListingProviderRequest {
    id?: string | null;
}

export interface DeleteRecordingRequest {
    recordingId: string;
}

export interface DeleteTunerHostRequest {
    id?: string | null;
}

export interface DiscoverTunersRequest {
    newDevicesOnly?: boolean;
}

export interface GetChannelRequest {
    channelId: string;
    userId?: string | null;
}

export interface GetChannelMappingOptionsRequest {
    providerId?: string | null;
}

export interface GetDefaultTimerRequest {
    programId?: string | null;
}

export interface GetLineupsRequest {
    id?: string | null;
    type?: string | null;
    location?: string | null;
    country?: string | null;
}

export interface GetLiveRecordingFileRequest {
    recordingId: string;
}

export interface GetLiveStreamFileRequest {
    streamId: string;
    container: string;
}

export interface GetLiveTvChannelsRequest {
    type?: ChannelType;
    userId?: string | null;
    startIndex?: number | null;
    isMovie?: boolean | null;
    isSeries?: boolean | null;
    isNews?: boolean | null;
    isKids?: boolean | null;
    isSports?: boolean | null;
    limit?: number | null;
    isFavorite?: boolean | null;
    isLiked?: boolean | null;
    isDisliked?: boolean | null;
    enableImages?: boolean | null;
    imageTypeLimit?: number | null;
    enableImageTypes?: Array<ImageType> | null;
    fields?: Array<ItemFields> | null;
    enableUserData?: boolean | null;
    sortBy?: string | null;
    sortOrder?: SortOrder;
    enableFavoriteSorting?: boolean;
    addCurrentProgram?: boolean;
}

export interface GetLiveTvProgramsRequest {
    channelIds?: string | null;
    userId?: string | null;
    minStartDate?: Date | null;
    hasAired?: boolean | null;
    isAiring?: boolean | null;
    maxStartDate?: Date | null;
    minEndDate?: Date | null;
    maxEndDate?: Date | null;
    isMovie?: boolean | null;
    isSeries?: boolean | null;
    isNews?: boolean | null;
    isKids?: boolean | null;
    isSports?: boolean | null;
    startIndex?: number | null;
    limit?: number | null;
    sortBy?: string | null;
    sortOrder?: string | null;
    genres?: string | null;
    genreIds?: string | null;
    enableImages?: boolean | null;
    imageTypeLimit?: number | null;
    enableImageTypes?: Array<ImageType> | null;
    enableUserData?: boolean | null;
    seriesTimerId?: string | null;
    librarySeriesId?: string | null;
    fields?: Array<ItemFields> | null;
    enableTotalRecordCount?: boolean;
}

export interface GetProgramRequest {
    programId: string;
    userId?: string | null;
}

export interface GetProgramsRequest {
    getProgramsDto?: GetProgramsDto;
}

export interface GetRecommendedProgramsRequest {
    userId?: string | null;
    limit?: number | null;
    isAiring?: boolean | null;
    hasAired?: boolean | null;
    isSeries?: boolean | null;
    isMovie?: boolean | null;
    isNews?: boolean | null;
    isKids?: boolean | null;
    isSports?: boolean | null;
    enableImages?: boolean | null;
    imageTypeLimit?: number | null;
    enableImageTypes?: Array<ImageType> | null;
    genreIds?: string | null;
    fields?: Array<ItemFields> | null;
    enableUserData?: boolean | null;
    enableTotalRecordCount?: boolean;
}

export interface GetRecordingRequest {
    recordingId: string;
    userId?: string | null;
}

export interface GetRecordingFoldersRequest {
    userId?: string | null;
}

export interface GetRecordingGroupRequest {
    groupId: string;
}

export interface GetRecordingGroupsRequest {
    userId?: string | null;
}

export interface GetRecordingsRequest {
    channelId?: string | null;
    userId?: string | null;
    startIndex?: number | null;
    limit?: number | null;
    status?: RecordingStatus;
    isInProgress?: boolean | null;
    seriesTimerId?: string | null;
    enableImages?: boolean | null;
    imageTypeLimit?: number | null;
    enableImageTypes?: Array<ImageType> | null;
    fields?: Array<ItemFields> | null;
    enableUserData?: boolean | null;
    isMovie?: boolean | null;
    isSeries?: boolean | null;
    isKids?: boolean | null;
    isSports?: boolean | null;
    isNews?: boolean | null;
    isLibraryItem?: boolean | null;
    enableTotalRecordCount?: boolean;
}

export interface GetRecordingsSeriesRequest {
    channelId?: string | null;
    userId?: string | null;
    groupId?: string | null;
    startIndex?: number | null;
    limit?: number | null;
    status?: RecordingStatus;
    isInProgress?: boolean | null;
    seriesTimerId?: string | null;
    enableImages?: boolean | null;
    imageTypeLimit?: number | null;
    enableImageTypes?: Array<ImageType> | null;
    fields?: Array<ItemFields> | null;
    enableUserData?: boolean | null;
    enableTotalRecordCount?: boolean;
}

export interface GetSeriesTimerRequest {
    timerId: string;
}

export interface GetSeriesTimersRequest {
    sortBy?: string | null;
    sortOrder?: SortOrder;
}

export interface GetTimerRequest {
    timerId: string;
}

export interface GetTimersRequest {
    channelId?: string | null;
    seriesTimerId?: string | null;
    isActive?: boolean | null;
    isScheduled?: boolean | null;
}

export interface ResetTunerRequest {
    tunerId: string;
}

export interface SetChannelMappingRequest {
    providerId?: string | null;
    tunerChannelId?: string | null;
    providerChannelId?: string | null;
}

export interface UpdateSeriesTimerRequest {
    timerId: string;
    seriesTimerInfoDto?: SeriesTimerInfoDto;
}

export interface UpdateTimerRequest {
    timerId: string;
    timerInfoDto?: TimerInfoDto;
}

/**
 * 
 */
export class LiveTvApi extends runtime.BaseAPI {

    /**
     * Adds a listings provider.
     */
    async addListingProviderRaw(requestParameters: AddListingProviderRequest): Promise<runtime.ApiResponse<ListingsProviderInfo>> {
        const queryParameters: any = {};

        if (requestParameters.pw !== undefined) {
            queryParameters['pw'] = requestParameters.pw;
        }

        if (requestParameters.validateListings !== undefined) {
            queryParameters['validateListings'] = requestParameters.validateListings;
        }

        if (requestParameters.validateLogin !== undefined) {
            queryParameters['validateLogin'] = requestParameters.validateLogin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/ListingProviders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListingsProviderInfoToJSON(requestParameters.listingsProviderInfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListingsProviderInfoFromJSON(jsonValue));
    }

    /**
     * Adds a listings provider.
     */
    async addListingProvider(requestParameters: AddListingProviderRequest): Promise<ListingsProviderInfo> {
        const response = await this.addListingProviderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Adds a tuner host.
     */
    async addTunerHostRaw(requestParameters: AddTunerHostRequest): Promise<runtime.ApiResponse<TunerHostInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/TunerHosts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TunerHostInfoToJSON(requestParameters.tunerHostInfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TunerHostInfoFromJSON(jsonValue));
    }

    /**
     * Adds a tuner host.
     */
    async addTunerHost(requestParameters: AddTunerHostRequest): Promise<TunerHostInfo> {
        const response = await this.addTunerHostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Cancels a live tv series timer.
     */
    async cancelSeriesTimerRaw(requestParameters: CancelSeriesTimerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.timerId === null || requestParameters.timerId === undefined) {
            throw new runtime.RequiredError('timerId','Required parameter requestParameters.timerId was null or undefined when calling cancelSeriesTimer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/SeriesTimers/{timerId}`.replace(`{${"timerId"}}`, encodeURIComponent(String(requestParameters.timerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels a live tv series timer.
     */
    async cancelSeriesTimer(requestParameters: CancelSeriesTimerRequest): Promise<void> {
        await this.cancelSeriesTimerRaw(requestParameters);
    }

    /**
     * Cancels a live tv timer.
     */
    async cancelTimerRaw(requestParameters: CancelTimerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.timerId === null || requestParameters.timerId === undefined) {
            throw new runtime.RequiredError('timerId','Required parameter requestParameters.timerId was null or undefined when calling cancelTimer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Timers/{timerId}`.replace(`{${"timerId"}}`, encodeURIComponent(String(requestParameters.timerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels a live tv timer.
     */
    async cancelTimer(requestParameters: CancelTimerRequest): Promise<void> {
        await this.cancelTimerRaw(requestParameters);
    }

    /**
     * Creates a live tv series timer.
     */
    async createSeriesTimerRaw(requestParameters: CreateSeriesTimerRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/SeriesTimers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeriesTimerInfoDtoToJSON(requestParameters.seriesTimerInfoDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a live tv series timer.
     */
    async createSeriesTimer(requestParameters: CreateSeriesTimerRequest): Promise<void> {
        await this.createSeriesTimerRaw(requestParameters);
    }

    /**
     * Creates a live tv timer.
     */
    async createTimerRaw(requestParameters: CreateTimerRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Timers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimerInfoDtoToJSON(requestParameters.timerInfoDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a live tv timer.
     */
    async createTimer(requestParameters: CreateTimerRequest): Promise<void> {
        await this.createTimerRaw(requestParameters);
    }

    /**
     * Delete listing provider.
     */
    async deleteListingProviderRaw(requestParameters: DeleteListingProviderRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/ListingProviders`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete listing provider.
     */
    async deleteListingProvider(requestParameters: DeleteListingProviderRequest): Promise<void> {
        await this.deleteListingProviderRaw(requestParameters);
    }

    /**
     * Deletes a live tv recording.
     */
    async deleteRecordingRaw(requestParameters: DeleteRecordingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.recordingId === null || requestParameters.recordingId === undefined) {
            throw new runtime.RequiredError('recordingId','Required parameter requestParameters.recordingId was null or undefined when calling deleteRecording.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Recordings/{recordingId}`.replace(`{${"recordingId"}}`, encodeURIComponent(String(requestParameters.recordingId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a live tv recording.
     */
    async deleteRecording(requestParameters: DeleteRecordingRequest): Promise<void> {
        await this.deleteRecordingRaw(requestParameters);
    }

    /**
     * Deletes a tuner host.
     */
    async deleteTunerHostRaw(requestParameters: DeleteTunerHostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/TunerHosts`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a tuner host.
     */
    async deleteTunerHost(requestParameters: DeleteTunerHostRequest): Promise<void> {
        await this.deleteTunerHostRaw(requestParameters);
    }

    /**
     * Discover tuners.
     */
    async discoverTunersRaw(requestParameters: DiscoverTunersRequest): Promise<runtime.ApiResponse<Array<TunerHostInfo>>> {
        const queryParameters: any = {};

        if (requestParameters.newDevicesOnly !== undefined) {
            queryParameters['newDevicesOnly'] = requestParameters.newDevicesOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Tuners/Discvover`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TunerHostInfoFromJSON));
    }

    /**
     * Discover tuners.
     */
    async discoverTuners(requestParameters: DiscoverTunersRequest): Promise<Array<TunerHostInfo>> {
        const response = await this.discoverTunersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a live tv channel.
     */
    async getChannelRaw(requestParameters: GetChannelRequest): Promise<runtime.ApiResponse<BaseItemDto>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getChannel.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Channels/{channelId}`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoFromJSON(jsonValue));
    }

    /**
     * Gets a live tv channel.
     */
    async getChannel(requestParameters: GetChannelRequest): Promise<BaseItemDto> {
        const response = await this.getChannelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get channel mapping options.
     */
    async getChannelMappingOptionsRaw(requestParameters: GetChannelMappingOptionsRequest): Promise<runtime.ApiResponse<ChannelMappingOptionsDto>> {
        const queryParameters: any = {};

        if (requestParameters.providerId !== undefined) {
            queryParameters['providerId'] = requestParameters.providerId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/ChannelMappingOptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelMappingOptionsDtoFromJSON(jsonValue));
    }

    /**
     * Get channel mapping options.
     */
    async getChannelMappingOptions(requestParameters: GetChannelMappingOptionsRequest): Promise<ChannelMappingOptionsDto> {
        const response = await this.getChannelMappingOptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets default listings provider info.
     */
    async getDefaultListingProviderRaw(): Promise<runtime.ApiResponse<ListingsProviderInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/ListingProviders/Default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListingsProviderInfoFromJSON(jsonValue));
    }

    /**
     * Gets default listings provider info.
     */
    async getDefaultListingProvider(): Promise<ListingsProviderInfo> {
        const response = await this.getDefaultListingProviderRaw();
        return await response.value();
    }

    /**
     * Gets the default values for a new timer.
     */
    async getDefaultTimerRaw(requestParameters: GetDefaultTimerRequest): Promise<runtime.ApiResponse<SeriesTimerInfoDto>> {
        const queryParameters: any = {};

        if (requestParameters.programId !== undefined) {
            queryParameters['programId'] = requestParameters.programId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Timers/Defaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesTimerInfoDtoFromJSON(jsonValue));
    }

    /**
     * Gets the default values for a new timer.
     */
    async getDefaultTimer(requestParameters: GetDefaultTimerRequest): Promise<SeriesTimerInfoDto> {
        const response = await this.getDefaultTimerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get guid info.
     */
    async getGuideInfoRaw(): Promise<runtime.ApiResponse<GuideInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/GuideInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GuideInfoFromJSON(jsonValue));
    }

    /**
     * Get guid info.
     */
    async getGuideInfo(): Promise<GuideInfo> {
        const response = await this.getGuideInfoRaw();
        return await response.value();
    }

    /**
     * Gets available lineups.
     */
    async getLineupsRaw(requestParameters: GetLineupsRequest): Promise<runtime.ApiResponse<Array<NameIdPair>>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.location !== undefined) {
            queryParameters['location'] = requestParameters.location;
        }

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/ListingProviders/Lineups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NameIdPairFromJSON));
    }

    /**
     * Gets available lineups.
     */
    async getLineups(requestParameters: GetLineupsRequest): Promise<Array<NameIdPair>> {
        const response = await this.getLineupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a live tv recording stream.
     */
    async getLiveRecordingFileRaw(requestParameters: GetLiveRecordingFileRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.recordingId === null || requestParameters.recordingId === undefined) {
            throw new runtime.RequiredError('recordingId','Required parameter requestParameters.recordingId was null or undefined when calling getLiveRecordingFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/LiveRecordings/{recordingId}/stream`.replace(`{${"recordingId"}}`, encodeURIComponent(String(requestParameters.recordingId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a live tv recording stream.
     */
    async getLiveRecordingFile(requestParameters: GetLiveRecordingFileRequest): Promise<any> {
        const response = await this.getLiveRecordingFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a live tv channel stream.
     */
    async getLiveStreamFileRaw(requestParameters: GetLiveStreamFileRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.streamId === null || requestParameters.streamId === undefined) {
            throw new runtime.RequiredError('streamId','Required parameter requestParameters.streamId was null or undefined when calling getLiveStreamFile.');
        }

        if (requestParameters.container === null || requestParameters.container === undefined) {
            throw new runtime.RequiredError('container','Required parameter requestParameters.container was null or undefined when calling getLiveStreamFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/LiveStreamFiles/{streamId}/stream.{container}`.replace(`{${"streamId"}}`, encodeURIComponent(String(requestParameters.streamId))).replace(`{${"container"}}`, encodeURIComponent(String(requestParameters.container))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a live tv channel stream.
     */
    async getLiveStreamFile(requestParameters: GetLiveStreamFileRequest): Promise<any> {
        const response = await this.getLiveStreamFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available live tv channels.
     */
    async getLiveTvChannelsRaw(requestParameters: GetLiveTvChannelsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.isMovie !== undefined) {
            queryParameters['isMovie'] = requestParameters.isMovie;
        }

        if (requestParameters.isSeries !== undefined) {
            queryParameters['isSeries'] = requestParameters.isSeries;
        }

        if (requestParameters.isNews !== undefined) {
            queryParameters['isNews'] = requestParameters.isNews;
        }

        if (requestParameters.isKids !== undefined) {
            queryParameters['isKids'] = requestParameters.isKids;
        }

        if (requestParameters.isSports !== undefined) {
            queryParameters['isSports'] = requestParameters.isSports;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.isFavorite !== undefined) {
            queryParameters['isFavorite'] = requestParameters.isFavorite;
        }

        if (requestParameters.isLiked !== undefined) {
            queryParameters['isLiked'] = requestParameters.isLiked;
        }

        if (requestParameters.isDisliked !== undefined) {
            queryParameters['isDisliked'] = requestParameters.isDisliked;
        }

        if (requestParameters.enableImages !== undefined) {
            queryParameters['enableImages'] = requestParameters.enableImages;
        }

        if (requestParameters.imageTypeLimit !== undefined) {
            queryParameters['imageTypeLimit'] = requestParameters.imageTypeLimit;
        }

        if (requestParameters.enableImageTypes) {
            queryParameters['enableImageTypes'] = requestParameters.enableImageTypes;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.enableUserData !== undefined) {
            queryParameters['enableUserData'] = requestParameters.enableUserData;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.enableFavoriteSorting !== undefined) {
            queryParameters['enableFavoriteSorting'] = requestParameters.enableFavoriteSorting;
        }

        if (requestParameters.addCurrentProgram !== undefined) {
            queryParameters['addCurrentProgram'] = requestParameters.addCurrentProgram;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets available live tv channels.
     */
    async getLiveTvChannels(requestParameters: GetLiveTvChannelsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getLiveTvChannelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available live tv services.
     */
    async getLiveTvInfoRaw(): Promise<runtime.ApiResponse<LiveTvInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveTvInfoFromJSON(jsonValue));
    }

    /**
     * Gets available live tv services.
     */
    async getLiveTvInfo(): Promise<LiveTvInfo> {
        const response = await this.getLiveTvInfoRaw();
        return await response.value();
    }

    /**
     * Gets available live tv epgs.
     */
    async getLiveTvProgramsRaw(requestParameters: GetLiveTvProgramsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.channelIds !== undefined) {
            queryParameters['channelIds'] = requestParameters.channelIds;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.minStartDate !== undefined) {
            queryParameters['minStartDate'] = (requestParameters.minStartDate as any).toISOString();
        }

        if (requestParameters.hasAired !== undefined) {
            queryParameters['hasAired'] = requestParameters.hasAired;
        }

        if (requestParameters.isAiring !== undefined) {
            queryParameters['isAiring'] = requestParameters.isAiring;
        }

        if (requestParameters.maxStartDate !== undefined) {
            queryParameters['maxStartDate'] = (requestParameters.maxStartDate as any).toISOString();
        }

        if (requestParameters.minEndDate !== undefined) {
            queryParameters['minEndDate'] = (requestParameters.minEndDate as any).toISOString();
        }

        if (requestParameters.maxEndDate !== undefined) {
            queryParameters['maxEndDate'] = (requestParameters.maxEndDate as any).toISOString();
        }

        if (requestParameters.isMovie !== undefined) {
            queryParameters['isMovie'] = requestParameters.isMovie;
        }

        if (requestParameters.isSeries !== undefined) {
            queryParameters['isSeries'] = requestParameters.isSeries;
        }

        if (requestParameters.isNews !== undefined) {
            queryParameters['isNews'] = requestParameters.isNews;
        }

        if (requestParameters.isKids !== undefined) {
            queryParameters['isKids'] = requestParameters.isKids;
        }

        if (requestParameters.isSports !== undefined) {
            queryParameters['isSports'] = requestParameters.isSports;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.genres !== undefined) {
            queryParameters['genres'] = requestParameters.genres;
        }

        if (requestParameters.genreIds !== undefined) {
            queryParameters['genreIds'] = requestParameters.genreIds;
        }

        if (requestParameters.enableImages !== undefined) {
            queryParameters['enableImages'] = requestParameters.enableImages;
        }

        if (requestParameters.imageTypeLimit !== undefined) {
            queryParameters['imageTypeLimit'] = requestParameters.imageTypeLimit;
        }

        if (requestParameters.enableImageTypes) {
            queryParameters['enableImageTypes'] = requestParameters.enableImageTypes;
        }

        if (requestParameters.enableUserData !== undefined) {
            queryParameters['enableUserData'] = requestParameters.enableUserData;
        }

        if (requestParameters.seriesTimerId !== undefined) {
            queryParameters['seriesTimerId'] = requestParameters.seriesTimerId;
        }

        if (requestParameters.librarySeriesId !== undefined) {
            queryParameters['librarySeriesId'] = requestParameters.librarySeriesId;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.enableTotalRecordCount !== undefined) {
            queryParameters['enableTotalRecordCount'] = requestParameters.enableTotalRecordCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Programs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets available live tv epgs.
     */
    async getLiveTvPrograms(requestParameters: GetLiveTvProgramsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getLiveTvProgramsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a live tv program.
     */
    async getProgramRaw(requestParameters: GetProgramRequest): Promise<runtime.ApiResponse<BaseItemDto>> {
        if (requestParameters.programId === null || requestParameters.programId === undefined) {
            throw new runtime.RequiredError('programId','Required parameter requestParameters.programId was null or undefined when calling getProgram.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Programs/{programId}`.replace(`{${"programId"}}`, encodeURIComponent(String(requestParameters.programId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoFromJSON(jsonValue));
    }

    /**
     * Gets a live tv program.
     */
    async getProgram(requestParameters: GetProgramRequest): Promise<BaseItemDto> {
        const response = await this.getProgramRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available live tv epgs.
     */
    async getProgramsRaw(requestParameters: GetProgramsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Programs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetProgramsDtoToJSON(requestParameters.getProgramsDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets available live tv epgs.
     */
    async getPrograms(requestParameters: GetProgramsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getProgramsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets recommended live tv epgs.
     */
    async getRecommendedProgramsRaw(requestParameters: GetRecommendedProgramsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.isAiring !== undefined) {
            queryParameters['isAiring'] = requestParameters.isAiring;
        }

        if (requestParameters.hasAired !== undefined) {
            queryParameters['hasAired'] = requestParameters.hasAired;
        }

        if (requestParameters.isSeries !== undefined) {
            queryParameters['isSeries'] = requestParameters.isSeries;
        }

        if (requestParameters.isMovie !== undefined) {
            queryParameters['isMovie'] = requestParameters.isMovie;
        }

        if (requestParameters.isNews !== undefined) {
            queryParameters['isNews'] = requestParameters.isNews;
        }

        if (requestParameters.isKids !== undefined) {
            queryParameters['isKids'] = requestParameters.isKids;
        }

        if (requestParameters.isSports !== undefined) {
            queryParameters['isSports'] = requestParameters.isSports;
        }

        if (requestParameters.enableImages !== undefined) {
            queryParameters['enableImages'] = requestParameters.enableImages;
        }

        if (requestParameters.imageTypeLimit !== undefined) {
            queryParameters['imageTypeLimit'] = requestParameters.imageTypeLimit;
        }

        if (requestParameters.enableImageTypes) {
            queryParameters['enableImageTypes'] = requestParameters.enableImageTypes;
        }

        if (requestParameters.genreIds !== undefined) {
            queryParameters['genreIds'] = requestParameters.genreIds;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.enableUserData !== undefined) {
            queryParameters['enableUserData'] = requestParameters.enableUserData;
        }

        if (requestParameters.enableTotalRecordCount !== undefined) {
            queryParameters['enableTotalRecordCount'] = requestParameters.enableTotalRecordCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Programs/Recommended`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets recommended live tv epgs.
     */
    async getRecommendedPrograms(requestParameters: GetRecommendedProgramsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getRecommendedProgramsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a live tv recording.
     */
    async getRecordingRaw(requestParameters: GetRecordingRequest): Promise<runtime.ApiResponse<BaseItemDto>> {
        if (requestParameters.recordingId === null || requestParameters.recordingId === undefined) {
            throw new runtime.RequiredError('recordingId','Required parameter requestParameters.recordingId was null or undefined when calling getRecording.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Recordings/{recordingId}`.replace(`{${"recordingId"}}`, encodeURIComponent(String(requestParameters.recordingId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoFromJSON(jsonValue));
    }

    /**
     * Gets a live tv recording.
     */
    async getRecording(requestParameters: GetRecordingRequest): Promise<BaseItemDto> {
        const response = await this.getRecordingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets recording folders.
     */
    async getRecordingFoldersRaw(requestParameters: GetRecordingFoldersRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Recordings/Folders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets recording folders.
     */
    async getRecordingFolders(requestParameters: GetRecordingFoldersRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getRecordingFoldersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get recording group.
     */
    async getRecordingGroupRaw(requestParameters: GetRecordingGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getRecordingGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Recordings/Groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get recording group.
     */
    async getRecordingGroup(requestParameters: GetRecordingGroupRequest): Promise<void> {
        await this.getRecordingGroupRaw(requestParameters);
    }

    /**
     * Gets live tv recording groups.
     */
    async getRecordingGroupsRaw(requestParameters: GetRecordingGroupsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Recordings/Groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets live tv recording groups.
     */
    async getRecordingGroups(requestParameters: GetRecordingGroupsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getRecordingGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets live tv recordings.
     */
    async getRecordingsRaw(requestParameters: GetRecordingsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channelId'] = requestParameters.channelId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.isInProgress !== undefined) {
            queryParameters['isInProgress'] = requestParameters.isInProgress;
        }

        if (requestParameters.seriesTimerId !== undefined) {
            queryParameters['seriesTimerId'] = requestParameters.seriesTimerId;
        }

        if (requestParameters.enableImages !== undefined) {
            queryParameters['enableImages'] = requestParameters.enableImages;
        }

        if (requestParameters.imageTypeLimit !== undefined) {
            queryParameters['imageTypeLimit'] = requestParameters.imageTypeLimit;
        }

        if (requestParameters.enableImageTypes) {
            queryParameters['enableImageTypes'] = requestParameters.enableImageTypes;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.enableUserData !== undefined) {
            queryParameters['enableUserData'] = requestParameters.enableUserData;
        }

        if (requestParameters.isMovie !== undefined) {
            queryParameters['isMovie'] = requestParameters.isMovie;
        }

        if (requestParameters.isSeries !== undefined) {
            queryParameters['isSeries'] = requestParameters.isSeries;
        }

        if (requestParameters.isKids !== undefined) {
            queryParameters['isKids'] = requestParameters.isKids;
        }

        if (requestParameters.isSports !== undefined) {
            queryParameters['isSports'] = requestParameters.isSports;
        }

        if (requestParameters.isNews !== undefined) {
            queryParameters['isNews'] = requestParameters.isNews;
        }

        if (requestParameters.isLibraryItem !== undefined) {
            queryParameters['isLibraryItem'] = requestParameters.isLibraryItem;
        }

        if (requestParameters.enableTotalRecordCount !== undefined) {
            queryParameters['enableTotalRecordCount'] = requestParameters.enableTotalRecordCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Recordings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets live tv recordings.
     */
    async getRecordings(requestParameters: GetRecordingsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getRecordingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets live tv recording series.
     */
    async getRecordingsSeriesRaw(requestParameters: GetRecordingsSeriesRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channelId'] = requestParameters.channelId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.groupId !== undefined) {
            queryParameters['groupId'] = requestParameters.groupId;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.isInProgress !== undefined) {
            queryParameters['isInProgress'] = requestParameters.isInProgress;
        }

        if (requestParameters.seriesTimerId !== undefined) {
            queryParameters['seriesTimerId'] = requestParameters.seriesTimerId;
        }

        if (requestParameters.enableImages !== undefined) {
            queryParameters['enableImages'] = requestParameters.enableImages;
        }

        if (requestParameters.imageTypeLimit !== undefined) {
            queryParameters['imageTypeLimit'] = requestParameters.imageTypeLimit;
        }

        if (requestParameters.enableImageTypes) {
            queryParameters['enableImageTypes'] = requestParameters.enableImageTypes;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.enableUserData !== undefined) {
            queryParameters['enableUserData'] = requestParameters.enableUserData;
        }

        if (requestParameters.enableTotalRecordCount !== undefined) {
            queryParameters['enableTotalRecordCount'] = requestParameters.enableTotalRecordCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Recordings/Series`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets live tv recording series.
     */
    async getRecordingsSeries(requestParameters: GetRecordingsSeriesRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getRecordingsSeriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available countries.
     */
    async getSchedulesDirectCountriesRaw(): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/ListingProviders/SchedulesDirect/Countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets available countries.
     */
    async getSchedulesDirectCountries(): Promise<any> {
        const response = await this.getSchedulesDirectCountriesRaw();
        return await response.value();
    }

    /**
     * Gets a live tv series timer.
     */
    async getSeriesTimerRaw(requestParameters: GetSeriesTimerRequest): Promise<runtime.ApiResponse<SeriesTimerInfoDto>> {
        if (requestParameters.timerId === null || requestParameters.timerId === undefined) {
            throw new runtime.RequiredError('timerId','Required parameter requestParameters.timerId was null or undefined when calling getSeriesTimer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/SeriesTimers/{timerId}`.replace(`{${"timerId"}}`, encodeURIComponent(String(requestParameters.timerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesTimerInfoDtoFromJSON(jsonValue));
    }

    /**
     * Gets a live tv series timer.
     */
    async getSeriesTimer(requestParameters: GetSeriesTimerRequest): Promise<SeriesTimerInfoDto> {
        const response = await this.getSeriesTimerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets live tv series timers.
     */
    async getSeriesTimersRaw(requestParameters: GetSeriesTimersRequest): Promise<runtime.ApiResponse<SeriesTimerInfoDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/SeriesTimers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesTimerInfoDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets live tv series timers.
     */
    async getSeriesTimers(requestParameters: GetSeriesTimersRequest): Promise<SeriesTimerInfoDtoQueryResult> {
        const response = await this.getSeriesTimersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a timer.
     */
    async getTimerRaw(requestParameters: GetTimerRequest): Promise<runtime.ApiResponse<TimerInfoDto>> {
        if (requestParameters.timerId === null || requestParameters.timerId === undefined) {
            throw new runtime.RequiredError('timerId','Required parameter requestParameters.timerId was null or undefined when calling getTimer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Timers/{timerId}`.replace(`{${"timerId"}}`, encodeURIComponent(String(requestParameters.timerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerInfoDtoFromJSON(jsonValue));
    }

    /**
     * Gets a timer.
     */
    async getTimer(requestParameters: GetTimerRequest): Promise<TimerInfoDto> {
        const response = await this.getTimerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the live tv timers.
     */
    async getTimersRaw(requestParameters: GetTimersRequest): Promise<runtime.ApiResponse<TimerInfoDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channelId'] = requestParameters.channelId;
        }

        if (requestParameters.seriesTimerId !== undefined) {
            queryParameters['seriesTimerId'] = requestParameters.seriesTimerId;
        }

        if (requestParameters.isActive !== undefined) {
            queryParameters['isActive'] = requestParameters.isActive;
        }

        if (requestParameters.isScheduled !== undefined) {
            queryParameters['isScheduled'] = requestParameters.isScheduled;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Timers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerInfoDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets the live tv timers.
     */
    async getTimers(requestParameters: GetTimersRequest): Promise<TimerInfoDtoQueryResult> {
        const response = await this.getTimersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get tuner host types.
     */
    async getTunerHostTypesRaw(): Promise<runtime.ApiResponse<Array<NameIdPair>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/TunerHosts/Types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NameIdPairFromJSON));
    }

    /**
     * Get tuner host types.
     */
    async getTunerHostTypes(): Promise<Array<NameIdPair>> {
        const response = await this.getTunerHostTypesRaw();
        return await response.value();
    }

    /**
     * Resets a tv tuner.
     */
    async resetTunerRaw(requestParameters: ResetTunerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tunerId === null || requestParameters.tunerId === undefined) {
            throw new runtime.RequiredError('tunerId','Required parameter requestParameters.tunerId was null or undefined when calling resetTuner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Tuners/{tunerId}/Reset`.replace(`{${"tunerId"}}`, encodeURIComponent(String(requestParameters.tunerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets a tv tuner.
     */
    async resetTuner(requestParameters: ResetTunerRequest): Promise<void> {
        await this.resetTunerRaw(requestParameters);
    }

    /**
     * Set channel mappings.
     */
    async setChannelMappingRaw(requestParameters: SetChannelMappingRequest): Promise<runtime.ApiResponse<TunerChannelMapping>> {
        const queryParameters: any = {};

        if (requestParameters.providerId !== undefined) {
            queryParameters['providerId'] = requestParameters.providerId;
        }

        if (requestParameters.tunerChannelId !== undefined) {
            queryParameters['tunerChannelId'] = requestParameters.tunerChannelId;
        }

        if (requestParameters.providerChannelId !== undefined) {
            queryParameters['providerChannelId'] = requestParameters.providerChannelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/ChannelMappings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TunerChannelMappingFromJSON(jsonValue));
    }

    /**
     * Set channel mappings.
     */
    async setChannelMapping(requestParameters: SetChannelMappingRequest): Promise<TunerChannelMapping> {
        const response = await this.setChannelMappingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a live tv series timer.
     */
    async updateSeriesTimerRaw(requestParameters: UpdateSeriesTimerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.timerId === null || requestParameters.timerId === undefined) {
            throw new runtime.RequiredError('timerId','Required parameter requestParameters.timerId was null or undefined when calling updateSeriesTimer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/SeriesTimers/{timerId}`.replace(`{${"timerId"}}`, encodeURIComponent(String(requestParameters.timerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeriesTimerInfoDtoToJSON(requestParameters.seriesTimerInfoDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a live tv series timer.
     */
    async updateSeriesTimer(requestParameters: UpdateSeriesTimerRequest): Promise<void> {
        await this.updateSeriesTimerRaw(requestParameters);
    }

    /**
     * Updates a live tv timer.
     */
    async updateTimerRaw(requestParameters: UpdateTimerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.timerId === null || requestParameters.timerId === undefined) {
            throw new runtime.RequiredError('timerId','Required parameter requestParameters.timerId was null or undefined when calling updateTimer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/LiveTv/Timers/{timerId}`.replace(`{${"timerId"}}`, encodeURIComponent(String(requestParameters.timerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimerInfoDtoToJSON(requestParameters.timerInfoDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a live tv timer.
     */
    async updateTimer(requestParameters: UpdateTimerRequest): Promise<void> {
        await this.updateTimerRaw(requestParameters);
    }

}
