/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BrandingOptions,
    BrandingOptionsFromJSON,
    BrandingOptionsToJSON,
} from '../models';

/**
 * 
 */
export class BrandingApi extends runtime.BaseAPI {

    /**
     * Gets branding css.
     */
    async getBrandingCssRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Branding/Css`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets branding css.
     */
    async getBrandingCss(): Promise<string> {
        const response = await this.getBrandingCssRaw();
        return await response.value();
    }

    /**
     * Gets branding css.
     */
    async getBrandingCss2Raw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Branding/Css.css`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets branding css.
     */
    async getBrandingCss2(): Promise<string> {
        const response = await this.getBrandingCss2Raw();
        return await response.value();
    }

    /**
     * Gets branding configuration.
     */
    async getBrandingOptionsRaw(): Promise<runtime.ApiResponse<BrandingOptions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Branding/Configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandingOptionsFromJSON(jsonValue));
    }

    /**
     * Gets branding configuration.
     */
    async getBrandingOptions(): Promise<BrandingOptions> {
        const response = await this.getBrandingOptionsRaw();
        return await response.value();
    }

}
