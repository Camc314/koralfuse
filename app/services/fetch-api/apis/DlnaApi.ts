/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeviceProfile,
    DeviceProfileFromJSON,
    DeviceProfileToJSON,
    DeviceProfileInfo,
    DeviceProfileInfoFromJSON,
    DeviceProfileInfoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface CreateProfileRequest {
    deviceProfile?: DeviceProfile;
}

export interface DeleteProfileRequest {
    profileId: string;
}

export interface GetProfileRequest {
    profileId: string;
}

export interface UpdateProfileRequest {
    profileId: string;
    deviceProfile?: DeviceProfile;
}

/**
 * 
 */
export class DlnaApi extends runtime.BaseAPI {

    /**
     * Creates a profile.
     */
    async createProfileRaw(requestParameters: CreateProfileRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/Profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceProfileToJSON(requestParameters.deviceProfile),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a profile.
     */
    async createProfile(requestParameters: CreateProfileRequest): Promise<void> {
        await this.createProfileRaw(requestParameters);
    }

    /**
     * Deletes a profile.
     */
    async deleteProfileRaw(requestParameters: DeleteProfileRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/Profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a profile.
     */
    async deleteProfile(requestParameters: DeleteProfileRequest): Promise<void> {
        await this.deleteProfileRaw(requestParameters);
    }

    /**
     * Gets the default profile.
     */
    async getDefaultProfileRaw(): Promise<runtime.ApiResponse<DeviceProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/Profiles/Default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceProfileFromJSON(jsonValue));
    }

    /**
     * Gets the default profile.
     */
    async getDefaultProfile(): Promise<DeviceProfile> {
        const response = await this.getDefaultProfileRaw();
        return await response.value();
    }

    /**
     * Gets a single profile.
     */
    async getProfileRaw(requestParameters: GetProfileRequest): Promise<runtime.ApiResponse<DeviceProfile>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/Profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceProfileFromJSON(jsonValue));
    }

    /**
     * Gets a single profile.
     */
    async getProfile(requestParameters: GetProfileRequest): Promise<DeviceProfile> {
        const response = await this.getProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get profile infos.
     */
    async getProfileInfosRaw(): Promise<runtime.ApiResponse<Array<DeviceProfileInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/ProfileInfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceProfileInfoFromJSON));
    }

    /**
     * Get profile infos.
     */
    async getProfileInfos(): Promise<Array<DeviceProfileInfo>> {
        const response = await this.getProfileInfosRaw();
        return await response.value();
    }

    /**
     * Updates a profile.
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/Profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceProfileToJSON(requestParameters.deviceProfile),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a profile.
     */
    async updateProfile(requestParameters: UpdateProfileRequest): Promise<void> {
        await this.updateProfileRaw(requestParameters);
    }

}
