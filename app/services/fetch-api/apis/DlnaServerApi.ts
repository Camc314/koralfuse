/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControlResponse,
    ControlResponseFromJSON,
    ControlResponseToJSON,
} from '../models';

export interface GetConnectionManagerRequest {
    serverId: string;
}

export interface GetConnectionManager2Request {
    serverId: string;
}

export interface GetConnectionManager3Request {
    serverId: string;
}

export interface GetContentDirectoryRequest {
    serverId: string;
}

export interface GetContentDirectory2Request {
    serverId: string;
}

export interface GetContentDirectory3Request {
    serverId: string;
}

export interface GetDescriptionXmlRequest {
    serverId: string;
}

export interface GetDescriptionXml2Request {
    serverId: string;
}

export interface GetIconRequest {
    fileName: string;
}

export interface GetIconIdRequest {
    serverId: string;
    fileName: string;
}

export interface GetMediaReceiverRegistrarRequest {
    serverId: string;
}

export interface GetMediaReceiverRegistrar2Request {
    serverId: string;
}

export interface GetMediaReceiverRegistrar3Request {
    serverId: string;
}

export interface ProcessConnectionManagerControlRequestRequest {
    serverId: string;
}

export interface ProcessContentDirectoryControlRequestRequest {
    serverId: string;
}

export interface ProcessMediaReceiverRegistrarControlRequestRequest {
    serverId: string;
}

/**
 * 
 */
export class DlnaServerApi extends runtime.BaseAPI {

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getConnectionManagerRaw(requestParameters: GetConnectionManagerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getConnectionManager.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ConnectionManager`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getConnectionManager(requestParameters: GetConnectionManagerRequest): Promise<any> {
        const response = await this.getConnectionManagerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getConnectionManager2Raw(requestParameters: GetConnectionManager2Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getConnectionManager2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ConnectionManager/ConnectionManager`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getConnectionManager2(requestParameters: GetConnectionManager2Request): Promise<any> {
        const response = await this.getConnectionManager2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getConnectionManager3Raw(requestParameters: GetConnectionManager3Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getConnectionManager3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getConnectionManager3(requestParameters: GetConnectionManager3Request): Promise<any> {
        const response = await this.getConnectionManager3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna content directory xml.
     */
    async getContentDirectoryRaw(requestParameters: GetContentDirectoryRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getContentDirectory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ContentDirectory`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna content directory xml.
     */
    async getContentDirectory(requestParameters: GetContentDirectoryRequest): Promise<any> {
        const response = await this.getContentDirectoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna content directory xml.
     */
    async getContentDirectory2Raw(requestParameters: GetContentDirectory2Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getContentDirectory2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ContentDirectory/ContentDirectory`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna content directory xml.
     */
    async getContentDirectory2(requestParameters: GetContentDirectory2Request): Promise<any> {
        const response = await this.getContentDirectory2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna content directory xml.
     */
    async getContentDirectory3Raw(requestParameters: GetContentDirectory3Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getContentDirectory3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna content directory xml.
     */
    async getContentDirectory3(requestParameters: GetContentDirectory3Request): Promise<any> {
        const response = await this.getContentDirectory3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get Description Xml.
     */
    async getDescriptionXmlRaw(requestParameters: GetDescriptionXmlRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getDescriptionXml.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/description`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Description Xml.
     */
    async getDescriptionXml(requestParameters: GetDescriptionXmlRequest): Promise<any> {
        const response = await this.getDescriptionXmlRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Description Xml.
     */
    async getDescriptionXml2Raw(requestParameters: GetDescriptionXml2Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getDescriptionXml2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/description.xml`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Description Xml.
     */
    async getDescriptionXml2(requestParameters: GetDescriptionXml2Request): Promise<any> {
        const response = await this.getDescriptionXml2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a server icon.
     */
    async getIconRaw(requestParameters: GetIconRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.fileName === null || requestParameters.fileName === undefined) {
            throw new runtime.RequiredError('fileName','Required parameter requestParameters.fileName was null or undefined when calling getIcon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/icons/{fileName}`.replace(`{${"fileName"}}`, encodeURIComponent(String(requestParameters.fileName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a server icon.
     */
    async getIcon(requestParameters: GetIconRequest): Promise<any> {
        const response = await this.getIconRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a server icon.
     */
    async getIconIdRaw(requestParameters: GetIconIdRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getIconId.');
        }

        if (requestParameters.fileName === null || requestParameters.fileName === undefined) {
            throw new runtime.RequiredError('fileName','Required parameter requestParameters.fileName was null or undefined when calling getIconId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/icons/{fileName}`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))).replace(`{${"fileName"}}`, encodeURIComponent(String(requestParameters.fileName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a server icon.
     */
    async getIconId(requestParameters: GetIconIdRequest): Promise<any> {
        const response = await this.getIconIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getMediaReceiverRegistrarRaw(requestParameters: GetMediaReceiverRegistrarRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getMediaReceiverRegistrar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/MediaReceiverRegistrar`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getMediaReceiverRegistrar(requestParameters: GetMediaReceiverRegistrarRequest): Promise<any> {
        const response = await this.getMediaReceiverRegistrarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getMediaReceiverRegistrar2Raw(requestParameters: GetMediaReceiverRegistrar2Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getMediaReceiverRegistrar2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getMediaReceiverRegistrar2(requestParameters: GetMediaReceiverRegistrar2Request): Promise<any> {
        const response = await this.getMediaReceiverRegistrar2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getMediaReceiverRegistrar3Raw(requestParameters: GetMediaReceiverRegistrar3Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling getMediaReceiverRegistrar3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets Dlna media receiver registrar xml.
     */
    async getMediaReceiverRegistrar3(requestParameters: GetMediaReceiverRegistrar3Request): Promise<any> {
        const response = await this.getMediaReceiverRegistrar3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Process a connection manager control request.
     */
    async processConnectionManagerControlRequestRaw(requestParameters: ProcessConnectionManagerControlRequestRequest): Promise<runtime.ApiResponse<ControlResponse>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling processConnectionManagerControlRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ConnectionManager/Control`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControlResponseFromJSON(jsonValue));
    }

    /**
     * Process a connection manager control request.
     */
    async processConnectionManagerControlRequest(requestParameters: ProcessConnectionManagerControlRequestRequest): Promise<ControlResponse> {
        const response = await this.processConnectionManagerControlRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Process a content directory control request.
     */
    async processContentDirectoryControlRequestRaw(requestParameters: ProcessContentDirectoryControlRequestRequest): Promise<runtime.ApiResponse<ControlResponse>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling processContentDirectoryControlRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/ContentDirectory/Control`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControlResponseFromJSON(jsonValue));
    }

    /**
     * Process a content directory control request.
     */
    async processContentDirectoryControlRequest(requestParameters: ProcessContentDirectoryControlRequestRequest): Promise<ControlResponse> {
        const response = await this.processContentDirectoryControlRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Process a media receiver registrar control request.
     */
    async processMediaReceiverRegistrarControlRequestRaw(requestParameters: ProcessMediaReceiverRegistrarControlRequestRequest): Promise<runtime.ApiResponse<ControlResponse>> {
        if (requestParameters.serverId === null || requestParameters.serverId === undefined) {
            throw new runtime.RequiredError('serverId','Required parameter requestParameters.serverId was null or undefined when calling processMediaReceiverRegistrarControlRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Dlna/{serverId}/MediaReceiverRegistrar/Control`.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters.serverId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControlResponseFromJSON(jsonValue));
    }

    /**
     * Process a media receiver registrar control request.
     */
    async processMediaReceiverRegistrarControlRequest(requestParameters: ProcessMediaReceiverRegistrarControlRequestRequest): Promise<ControlResponse> {
        const response = await this.processMediaReceiverRegistrarControlRequestRaw(requestParameters);
        return await response.value();
    }

}
