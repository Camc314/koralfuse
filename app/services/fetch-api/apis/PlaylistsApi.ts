/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BaseItemDtoQueryResult,
    BaseItemDtoQueryResultFromJSON,
    BaseItemDtoQueryResultToJSON,
    CreatePlaylistDto,
    CreatePlaylistDtoFromJSON,
    CreatePlaylistDtoToJSON,
    PlaylistCreationResult,
    PlaylistCreationResultFromJSON,
    PlaylistCreationResultToJSON,
} from '../models';

export interface AddToPlaylistRequest {
    playlistId: string;
    ids?: string | null;
    userId?: string | null;
}

export interface CreatePlaylistRequest {
    createPlaylistDto: CreatePlaylistDto;
}

export interface GetPlaylistItemsRequest {
    playlistId: string;
    userId: string;
    startIndex?: number | null;
    limit?: number | null;
    fields?: string | null;
    enableImages?: boolean | null;
    enableUserData?: boolean | null;
    imageTypeLimit?: number | null;
    enableImageTypes?: string | null;
}

export interface MoveItemRequest {
    playlistId: string;
    itemId: string;
    newIndex: number;
}

export interface RemoveFromPlaylistRequest {
    playlistId: string;
    entryIds?: string | null;
}

/**
 * 
 */
export class PlaylistsApi extends runtime.BaseAPI {

    /**
     * Adds items to a playlist.
     */
    async addToPlaylistRaw(requestParameters: AddToPlaylistRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling addToPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters.ids !== undefined) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Playlists/{playlistId}/Items`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds items to a playlist.
     */
    async addToPlaylist(requestParameters: AddToPlaylistRequest): Promise<void> {
        await this.addToPlaylistRaw(requestParameters);
    }

    /**
     * Creates a new playlist.
     */
    async createPlaylistRaw(requestParameters: CreatePlaylistRequest): Promise<runtime.ApiResponse<PlaylistCreationResult>> {
        if (requestParameters.createPlaylistDto === null || requestParameters.createPlaylistDto === undefined) {
            throw new runtime.RequiredError('createPlaylistDto','Required parameter requestParameters.createPlaylistDto was null or undefined when calling createPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Playlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlaylistDtoToJSON(requestParameters.createPlaylistDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistCreationResultFromJSON(jsonValue));
    }

    /**
     * Creates a new playlist.
     */
    async createPlaylist(requestParameters: CreatePlaylistRequest): Promise<PlaylistCreationResult> {
        const response = await this.createPlaylistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the original items of a playlist.
     */
    async getPlaylistItemsRaw(requestParameters: GetPlaylistItemsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling getPlaylistItems.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPlaylistItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.enableImages !== undefined) {
            queryParameters['enableImages'] = requestParameters.enableImages;
        }

        if (requestParameters.enableUserData !== undefined) {
            queryParameters['enableUserData'] = requestParameters.enableUserData;
        }

        if (requestParameters.imageTypeLimit !== undefined) {
            queryParameters['imageTypeLimit'] = requestParameters.imageTypeLimit;
        }

        if (requestParameters.enableImageTypes !== undefined) {
            queryParameters['enableImageTypes'] = requestParameters.enableImageTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Playlists/{playlistId}/Items`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets the original items of a playlist.
     */
    async getPlaylistItems(requestParameters: GetPlaylistItemsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getPlaylistItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Moves a playlist item.
     */
    async moveItemRaw(requestParameters: MoveItemRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling moveItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling moveItem.');
        }

        if (requestParameters.newIndex === null || requestParameters.newIndex === undefined) {
            throw new runtime.RequiredError('newIndex','Required parameter requestParameters.newIndex was null or undefined when calling moveItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"newIndex"}}`, encodeURIComponent(String(requestParameters.newIndex))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Moves a playlist item.
     */
    async moveItem(requestParameters: MoveItemRequest): Promise<void> {
        await this.moveItemRaw(requestParameters);
    }

    /**
     * Removes items from a playlist.
     */
    async removeFromPlaylistRaw(requestParameters: RemoveFromPlaylistRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling removeFromPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters.entryIds !== undefined) {
            queryParameters['entryIds'] = requestParameters.entryIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Playlists/{playlistId}/Items`.replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes items from a playlist.
     */
    async removeFromPlaylist(requestParameters: RemoveFromPlaylistRequest): Promise<void> {
        await this.removeFromPlaylistRaw(requestParameters);
    }

}
