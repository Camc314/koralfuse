/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BaseItemDtoQueryResult,
    BaseItemDtoQueryResultFromJSON,
    BaseItemDtoQueryResultToJSON,
    ChannelFeatures,
    ChannelFeaturesFromJSON,
    ChannelFeaturesToJSON,
} from '../models';

export interface GetChannelFeaturesRequest {
    channelId: string;
}

export interface GetChannelItemsRequest {
    channelId: string;
    folderId?: string | null;
    userId?: string | null;
    startIndex?: number | null;
    limit?: number | null;
    sortOrder?: string | null;
    filters?: string | null;
    sortBy?: string | null;
    fields?: string | null;
}

export interface GetChannelsRequest {
    userId?: string | null;
    startIndex?: number | null;
    limit?: number | null;
    supportsLatestItems?: boolean | null;
    supportsMediaDeletion?: boolean | null;
    isFavorite?: boolean | null;
}

export interface GetLatestChannelItemsRequest {
    userId?: string | null;
    startIndex?: number | null;
    limit?: number | null;
    filters?: string | null;
    fields?: string | null;
    channelIds?: string | null;
}

/**
 * 
 */
export class ChannelsApi extends runtime.BaseAPI {

    /**
     * Get all channel features.
     */
    async getAllChannelFeaturesRaw(): Promise<runtime.ApiResponse<Array<ChannelFeatures>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Channels/Features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChannelFeaturesFromJSON));
    }

    /**
     * Get all channel features.
     */
    async getAllChannelFeatures(): Promise<Array<ChannelFeatures>> {
        const response = await this.getAllChannelFeaturesRaw();
        return await response.value();
    }

    /**
     * Get channel features.
     */
    async getChannelFeaturesRaw(requestParameters: GetChannelFeaturesRequest): Promise<runtime.ApiResponse<ChannelFeatures>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getChannelFeatures.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Channels/{channelId}/Features`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFeaturesFromJSON(jsonValue));
    }

    /**
     * Get channel features.
     */
    async getChannelFeatures(requestParameters: GetChannelFeaturesRequest): Promise<ChannelFeatures> {
        const response = await this.getChannelFeaturesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get channel items.
     */
    async getChannelItemsRaw(requestParameters: GetChannelItemsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling getChannelItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.folderId !== undefined) {
            queryParameters['folderId'] = requestParameters.folderId;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Channels/{channelId}/Items`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Get channel items.
     */
    async getChannelItems(requestParameters: GetChannelItemsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getChannelItemsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available channels.
     */
    async getChannelsRaw(requestParameters: GetChannelsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.supportsLatestItems !== undefined) {
            queryParameters['supportsLatestItems'] = requestParameters.supportsLatestItems;
        }

        if (requestParameters.supportsMediaDeletion !== undefined) {
            queryParameters['supportsMediaDeletion'] = requestParameters.supportsMediaDeletion;
        }

        if (requestParameters.isFavorite !== undefined) {
            queryParameters['isFavorite'] = requestParameters.isFavorite;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets available channels.
     */
    async getChannels(requestParameters: GetChannelsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getChannelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets latest channel items.
     */
    async getLatestChannelItemsRaw(requestParameters: GetLatestChannelItemsRequest): Promise<runtime.ApiResponse<BaseItemDtoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.channelIds !== undefined) {
            queryParameters['channelIds'] = requestParameters.channelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Channels/Items/Latest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseItemDtoQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets latest channel items.
     */
    async getLatestChannelItems(requestParameters: GetLatestChannelItemsRequest): Promise<BaseItemDtoQueryResult> {
        const response = await this.getLatestChannelItemsRaw(requestParameters);
        return await response.value();
    }

}
