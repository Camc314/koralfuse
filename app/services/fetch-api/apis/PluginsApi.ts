/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MBRegistrationRecord,
    MBRegistrationRecordFromJSON,
    MBRegistrationRecordToJSON,
    PluginInfo,
    PluginInfoFromJSON,
    PluginInfoToJSON,
    PluginSecurityInfo,
    PluginSecurityInfoFromJSON,
    PluginSecurityInfoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface GetPluginConfigurationRequest {
    pluginId: string;
}

export interface GetRegistrationRequest {
    name: string;
}

export interface GetRegistrationStatusRequest {
    name: string;
}

export interface UninstallPluginRequest {
    pluginId: string;
}

export interface UpdatePluginConfigurationRequest {
    pluginId: string;
}

export interface UpdatePluginSecurityInfoRequest {
    pluginSecurityInfo: PluginSecurityInfo;
}

/**
 * 
 */
export class PluginsApi extends runtime.BaseAPI {

    /**
     * Gets plugin configuration.
     */
    async getPluginConfigurationRaw(requestParameters: GetPluginConfigurationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling getPluginConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins/{pluginId}/Configuration`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets plugin configuration.
     */
    async getPluginConfiguration(requestParameters: GetPluginConfigurationRequest): Promise<object> {
        const response = await this.getPluginConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get plugin security info.
     */
    async getPluginSecurityInfoRaw(): Promise<runtime.ApiResponse<PluginSecurityInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins/SecurityInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginSecurityInfoFromJSON(jsonValue));
    }

    /**
     * Get plugin security info.
     */
    async getPluginSecurityInfo(): Promise<PluginSecurityInfo> {
        const response = await this.getPluginSecurityInfoRaw();
        return await response.value();
    }

    /**
     * Gets a list of currently installed plugins.
     */
    async getPluginsRaw(): Promise<runtime.ApiResponse<Array<PluginInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PluginInfoFromJSON));
    }

    /**
     * Gets a list of currently installed plugins.
     */
    async getPlugins(): Promise<Array<PluginInfo>> {
        const response = await this.getPluginsRaw();
        return await response.value();
    }

    /**
     * Gets registration status for a feature.
     */
    async getRegistrationRaw(requestParameters: GetRegistrationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getRegistration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins/Registrations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gets registration status for a feature.
     */
    async getRegistration(requestParameters: GetRegistrationRequest): Promise<void> {
        await this.getRegistrationRaw(requestParameters);
    }

    /**
     * Gets registration status for a feature.
     */
    async getRegistrationStatusRaw(requestParameters: GetRegistrationStatusRequest): Promise<runtime.ApiResponse<MBRegistrationRecord>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getRegistrationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins/RegistrationRecords/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MBRegistrationRecordFromJSON(jsonValue));
    }

    /**
     * Gets registration status for a feature.
     */
    async getRegistrationStatus(requestParameters: GetRegistrationStatusRequest): Promise<MBRegistrationRecord> {
        const response = await this.getRegistrationStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Uninstalls a plugin.
     */
    async uninstallPluginRaw(requestParameters: UninstallPluginRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling uninstallPlugin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins/{pluginId}`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uninstalls a plugin.
     */
    async uninstallPlugin(requestParameters: UninstallPluginRequest): Promise<void> {
        await this.uninstallPluginRaw(requestParameters);
    }

    /**
     * Accepts plugin configuration as JSON body.
     * Updates plugin configuration.
     */
    async updatePluginConfigurationRaw(requestParameters: UpdatePluginConfigurationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pluginId === null || requestParameters.pluginId === undefined) {
            throw new runtime.RequiredError('pluginId','Required parameter requestParameters.pluginId was null or undefined when calling updatePluginConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins/{pluginId}/Configuration`.replace(`{${"pluginId"}}`, encodeURIComponent(String(requestParameters.pluginId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accepts plugin configuration as JSON body.
     * Updates plugin configuration.
     */
    async updatePluginConfiguration(requestParameters: UpdatePluginConfigurationRequest): Promise<void> {
        await this.updatePluginConfigurationRaw(requestParameters);
    }

    /**
     * Updates plugin security info.
     */
    async updatePluginSecurityInfoRaw(requestParameters: UpdatePluginSecurityInfoRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pluginSecurityInfo === null || requestParameters.pluginSecurityInfo === undefined) {
            throw new runtime.RequiredError('pluginSecurityInfo','Required parameter requestParameters.pluginSecurityInfo was null or undefined when calling updatePluginSecurityInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Plugins/SecurityInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginSecurityInfoToJSON(requestParameters.pluginSecurityInfo),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates plugin security info.
     */
    async updatePluginSecurityInfo(requestParameters: UpdatePluginSecurityInfoRequest): Promise<void> {
        await this.updatePluginSecurityInfoRaw(requestParameters);
    }

}
