/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AlbumInfoRemoteSearchQuery,
    AlbumInfoRemoteSearchQueryFromJSON,
    AlbumInfoRemoteSearchQueryToJSON,
    ArtistInfoRemoteSearchQuery,
    ArtistInfoRemoteSearchQueryFromJSON,
    ArtistInfoRemoteSearchQueryToJSON,
    BookInfoRemoteSearchQuery,
    BookInfoRemoteSearchQueryFromJSON,
    BookInfoRemoteSearchQueryToJSON,
    BoxSetInfoRemoteSearchQuery,
    BoxSetInfoRemoteSearchQueryFromJSON,
    BoxSetInfoRemoteSearchQueryToJSON,
    ExternalIdInfo,
    ExternalIdInfoFromJSON,
    ExternalIdInfoToJSON,
    MovieInfoRemoteSearchQuery,
    MovieInfoRemoteSearchQueryFromJSON,
    MovieInfoRemoteSearchQueryToJSON,
    MusicVideoInfoRemoteSearchQuery,
    MusicVideoInfoRemoteSearchQueryFromJSON,
    MusicVideoInfoRemoteSearchQueryToJSON,
    PersonLookupInfoRemoteSearchQuery,
    PersonLookupInfoRemoteSearchQueryFromJSON,
    PersonLookupInfoRemoteSearchQueryToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RemoteSearchResult,
    RemoteSearchResultFromJSON,
    RemoteSearchResultToJSON,
    SeriesInfoRemoteSearchQuery,
    SeriesInfoRemoteSearchQueryFromJSON,
    SeriesInfoRemoteSearchQueryToJSON,
    TrailerInfoRemoteSearchQuery,
    TrailerInfoRemoteSearchQueryFromJSON,
    TrailerInfoRemoteSearchQueryToJSON,
} from '../models';

export interface ApplySearchCriteriaRequest {
    itemId: string;
    remoteSearchResult: RemoteSearchResult;
    replaceAllImages?: boolean;
}

export interface GetBookRemoteSearchResultsRequest {
    bookInfoRemoteSearchQuery: BookInfoRemoteSearchQuery;
}

export interface GetBoxSetRemoteSearchResultsRequest {
    boxSetInfoRemoteSearchQuery: BoxSetInfoRemoteSearchQuery;
}

export interface GetExternalIdInfosRequest {
    itemId: string;
}

export interface GetMovieRemoteSearchResultsRequest {
    movieInfoRemoteSearchQuery: MovieInfoRemoteSearchQuery;
}

export interface GetMusicAlbumRemoteSearchResultsRequest {
    albumInfoRemoteSearchQuery: AlbumInfoRemoteSearchQuery;
}

export interface GetMusicArtistRemoteSearchResultsRequest {
    artistInfoRemoteSearchQuery: ArtistInfoRemoteSearchQuery;
}

export interface GetMusicVideoRemoteSearchResultsRequest {
    musicVideoInfoRemoteSearchQuery: MusicVideoInfoRemoteSearchQuery;
}

export interface GetPersonRemoteSearchResultsRequest {
    personLookupInfoRemoteSearchQuery: PersonLookupInfoRemoteSearchQuery;
}

export interface GetRemoteSearchImageRequest {
    imageUrl: string;
    providerName: string;
}

export interface GetSeriesRemoteSearchResultsRequest {
    seriesInfoRemoteSearchQuery: SeriesInfoRemoteSearchQuery;
}

export interface GetTrailerRemoteSearchResultsRequest {
    trailerInfoRemoteSearchQuery: TrailerInfoRemoteSearchQuery;
}

/**
 * 
 */
export class ItemLookupApi extends runtime.BaseAPI {

    /**
     * Applies search criteria to an item and refreshes metadata.
     */
    async applySearchCriteriaRaw(requestParameters: ApplySearchCriteriaRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling applySearchCriteria.');
        }

        if (requestParameters.remoteSearchResult === null || requestParameters.remoteSearchResult === undefined) {
            throw new runtime.RequiredError('remoteSearchResult','Required parameter requestParameters.remoteSearchResult was null or undefined when calling applySearchCriteria.');
        }

        const queryParameters: any = {};

        if (requestParameters.replaceAllImages !== undefined) {
            queryParameters['replaceAllImages'] = requestParameters.replaceAllImages;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/Apply/{itemId}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoteSearchResultToJSON(requestParameters.remoteSearchResult),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Applies search criteria to an item and refreshes metadata.
     */
    async applySearchCriteria(requestParameters: ApplySearchCriteriaRequest): Promise<void> {
        await this.applySearchCriteriaRaw(requestParameters);
    }

    /**
     * Get book remote search.
     */
    async getBookRemoteSearchResultsRaw(requestParameters: GetBookRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.bookInfoRemoteSearchQuery === null || requestParameters.bookInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('bookInfoRemoteSearchQuery','Required parameter requestParameters.bookInfoRemoteSearchQuery was null or undefined when calling getBookRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/Book`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookInfoRemoteSearchQueryToJSON(requestParameters.bookInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get book remote search.
     */
    async getBookRemoteSearchResults(requestParameters: GetBookRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getBookRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get box set remote search.
     */
    async getBoxSetRemoteSearchResultsRaw(requestParameters: GetBoxSetRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.boxSetInfoRemoteSearchQuery === null || requestParameters.boxSetInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('boxSetInfoRemoteSearchQuery','Required parameter requestParameters.boxSetInfoRemoteSearchQuery was null or undefined when calling getBoxSetRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/BoxSet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BoxSetInfoRemoteSearchQueryToJSON(requestParameters.boxSetInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get box set remote search.
     */
    async getBoxSetRemoteSearchResults(requestParameters: GetBoxSetRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getBoxSetRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the item\'s external id info.
     */
    async getExternalIdInfosRaw(requestParameters: GetExternalIdInfosRequest): Promise<runtime.ApiResponse<Array<ExternalIdInfo>>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getExternalIdInfos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/ExternalIdInfos`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExternalIdInfoFromJSON));
    }

    /**
     * Get the item\'s external id info.
     */
    async getExternalIdInfos(requestParameters: GetExternalIdInfosRequest): Promise<Array<ExternalIdInfo>> {
        const response = await this.getExternalIdInfosRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get movie remote search.
     */
    async getMovieRemoteSearchResultsRaw(requestParameters: GetMovieRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.movieInfoRemoteSearchQuery === null || requestParameters.movieInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('movieInfoRemoteSearchQuery','Required parameter requestParameters.movieInfoRemoteSearchQuery was null or undefined when calling getMovieRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/Movie`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MovieInfoRemoteSearchQueryToJSON(requestParameters.movieInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get movie remote search.
     */
    async getMovieRemoteSearchResults(requestParameters: GetMovieRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getMovieRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get music album remote search.
     */
    async getMusicAlbumRemoteSearchResultsRaw(requestParameters: GetMusicAlbumRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.albumInfoRemoteSearchQuery === null || requestParameters.albumInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('albumInfoRemoteSearchQuery','Required parameter requestParameters.albumInfoRemoteSearchQuery was null or undefined when calling getMusicAlbumRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/MusicAlbum`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlbumInfoRemoteSearchQueryToJSON(requestParameters.albumInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get music album remote search.
     */
    async getMusicAlbumRemoteSearchResults(requestParameters: GetMusicAlbumRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getMusicAlbumRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get music artist remote search.
     */
    async getMusicArtistRemoteSearchResultsRaw(requestParameters: GetMusicArtistRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.artistInfoRemoteSearchQuery === null || requestParameters.artistInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('artistInfoRemoteSearchQuery','Required parameter requestParameters.artistInfoRemoteSearchQuery was null or undefined when calling getMusicArtistRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/MusicArtist`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArtistInfoRemoteSearchQueryToJSON(requestParameters.artistInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get music artist remote search.
     */
    async getMusicArtistRemoteSearchResults(requestParameters: GetMusicArtistRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getMusicArtistRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get music video remote search.
     */
    async getMusicVideoRemoteSearchResultsRaw(requestParameters: GetMusicVideoRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.musicVideoInfoRemoteSearchQuery === null || requestParameters.musicVideoInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('musicVideoInfoRemoteSearchQuery','Required parameter requestParameters.musicVideoInfoRemoteSearchQuery was null or undefined when calling getMusicVideoRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/MusicVideo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MusicVideoInfoRemoteSearchQueryToJSON(requestParameters.musicVideoInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get music video remote search.
     */
    async getMusicVideoRemoteSearchResults(requestParameters: GetMusicVideoRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getMusicVideoRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get person remote search.
     */
    async getPersonRemoteSearchResultsRaw(requestParameters: GetPersonRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.personLookupInfoRemoteSearchQuery === null || requestParameters.personLookupInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('personLookupInfoRemoteSearchQuery','Required parameter requestParameters.personLookupInfoRemoteSearchQuery was null or undefined when calling getPersonRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/Person`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonLookupInfoRemoteSearchQueryToJSON(requestParameters.personLookupInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get person remote search.
     */
    async getPersonRemoteSearchResults(requestParameters: GetPersonRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getPersonRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a remote image.
     */
    async getRemoteSearchImageRaw(requestParameters: GetRemoteSearchImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.imageUrl === null || requestParameters.imageUrl === undefined) {
            throw new runtime.RequiredError('imageUrl','Required parameter requestParameters.imageUrl was null or undefined when calling getRemoteSearchImage.');
        }

        if (requestParameters.providerName === null || requestParameters.providerName === undefined) {
            throw new runtime.RequiredError('providerName','Required parameter requestParameters.providerName was null or undefined when calling getRemoteSearchImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.imageUrl !== undefined) {
            queryParameters['imageUrl'] = requestParameters.imageUrl;
        }

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/Image`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a remote image.
     */
    async getRemoteSearchImage(requestParameters: GetRemoteSearchImageRequest): Promise<any> {
        const response = await this.getRemoteSearchImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get series remote search.
     */
    async getSeriesRemoteSearchResultsRaw(requestParameters: GetSeriesRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.seriesInfoRemoteSearchQuery === null || requestParameters.seriesInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('seriesInfoRemoteSearchQuery','Required parameter requestParameters.seriesInfoRemoteSearchQuery was null or undefined when calling getSeriesRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/Series`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeriesInfoRemoteSearchQueryToJSON(requestParameters.seriesInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get series remote search.
     */
    async getSeriesRemoteSearchResults(requestParameters: GetSeriesRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getSeriesRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get trailer remote search.
     */
    async getTrailerRemoteSearchResultsRaw(requestParameters: GetTrailerRemoteSearchResultsRequest): Promise<runtime.ApiResponse<Array<RemoteSearchResult>>> {
        if (requestParameters.trailerInfoRemoteSearchQuery === null || requestParameters.trailerInfoRemoteSearchQuery === undefined) {
            throw new runtime.RequiredError('trailerInfoRemoteSearchQuery','Required parameter requestParameters.trailerInfoRemoteSearchQuery was null or undefined when calling getTrailerRemoteSearchResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/RemoteSearch/Trailer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrailerInfoRemoteSearchQueryToJSON(requestParameters.trailerInfoRemoteSearchQuery),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RemoteSearchResultFromJSON));
    }

    /**
     * Get trailer remote search.
     */
    async getTrailerRemoteSearchResults(requestParameters: GetTrailerRemoteSearchResultsRequest): Promise<Array<RemoteSearchResult>> {
        const response = await this.getTrailerRemoteSearchResultsRaw(requestParameters);
        return await response.value();
    }

}
