/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeviceInfo,
    DeviceInfoFromJSON,
    DeviceInfoToJSON,
    DeviceInfoQueryResult,
    DeviceInfoQueryResultFromJSON,
    DeviceInfoQueryResultToJSON,
    DeviceOptions,
    DeviceOptionsFromJSON,
    DeviceOptionsToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface DeleteDeviceRequest {
    id: string;
}

export interface GetDeviceInfoRequest {
    id: string;
}

export interface GetDeviceOptionsRequest {
    id: string;
}

export interface GetDevicesRequest {
    supportsSync?: boolean | null;
    userId?: string | null;
}

export interface UpdateDeviceOptionsRequest {
    id: string;
    deviceOptions: DeviceOptions;
}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI {

    /**
     * Deletes a device.
     */
    async deleteDeviceRaw(requestParameters: DeleteDeviceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDevice.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Devices`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a device.
     */
    async deleteDevice(requestParameters: DeleteDeviceRequest): Promise<void> {
        await this.deleteDeviceRaw(requestParameters);
    }

    /**
     * Get info for a device.
     */
    async getDeviceInfoRaw(requestParameters: GetDeviceInfoRequest): Promise<runtime.ApiResponse<DeviceInfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeviceInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Devices/Info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceInfoFromJSON(jsonValue));
    }

    /**
     * Get info for a device.
     */
    async getDeviceInfo(requestParameters: GetDeviceInfoRequest): Promise<DeviceInfo> {
        const response = await this.getDeviceInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get options for a device.
     */
    async getDeviceOptionsRaw(requestParameters: GetDeviceOptionsRequest): Promise<runtime.ApiResponse<DeviceOptions>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeviceOptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Devices/Options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceOptionsFromJSON(jsonValue));
    }

    /**
     * Get options for a device.
     */
    async getDeviceOptions(requestParameters: GetDeviceOptionsRequest): Promise<DeviceOptions> {
        const response = await this.getDeviceOptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Devices.
     */
    async getDevicesRaw(requestParameters: GetDevicesRequest): Promise<runtime.ApiResponse<DeviceInfoQueryResult>> {
        const queryParameters: any = {};

        if (requestParameters.supportsSync !== undefined) {
            queryParameters['supportsSync'] = requestParameters.supportsSync;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Devices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceInfoQueryResultFromJSON(jsonValue));
    }

    /**
     * Get Devices.
     */
    async getDevices(requestParameters: GetDevicesRequest): Promise<DeviceInfoQueryResult> {
        const response = await this.getDevicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update device options.
     */
    async updateDeviceOptionsRaw(requestParameters: UpdateDeviceOptionsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDeviceOptions.');
        }

        if (requestParameters.deviceOptions === null || requestParameters.deviceOptions === undefined) {
            throw new runtime.RequiredError('deviceOptions','Required parameter requestParameters.deviceOptions was null or undefined when calling updateDeviceOptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Devices/Options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceOptionsToJSON(requestParameters.deviceOptions),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update device options.
     */
    async updateDeviceOptions(requestParameters: UpdateDeviceOptionsRequest): Promise<void> {
        await this.updateDeviceOptionsRaw(requestParameters);
    }

}
