/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ImageProviderInfo,
    ImageProviderInfoFromJSON,
    ImageProviderInfoToJSON,
    ImageType,
    ImageTypeFromJSON,
    ImageTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RemoteImageResult,
    RemoteImageResultFromJSON,
    RemoteImageResultToJSON,
} from '../models';

export interface DownloadRemoteImageRequest {
    itemId: string;
    type: ImageType;
    imageUrl?: string | null;
}

export interface GetRemoteImageRequest {
    imageUrl: string;
}

export interface GetRemoteImageProvidersRequest {
    itemId: string;
}

export interface GetRemoteImagesRequest {
    itemId: string;
    type?: ImageType;
    startIndex?: number | null;
    limit?: number | null;
    providerName?: string | null;
    includeAllLanguages?: boolean;
}

/**
 * 
 */
export class RemoteImageApi extends runtime.BaseAPI {

    /**
     * Downloads a remote image for an item.
     */
    async downloadRemoteImageRaw(requestParameters: DownloadRemoteImageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling downloadRemoteImage.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling downloadRemoteImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.imageUrl !== undefined) {
            queryParameters['imageUrl'] = requestParameters.imageUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/RemoteImages/Download`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Downloads a remote image for an item.
     */
    async downloadRemoteImage(requestParameters: DownloadRemoteImageRequest): Promise<void> {
        await this.downloadRemoteImageRaw(requestParameters);
    }

    /**
     * Gets a remote image.
     */
    async getRemoteImageRaw(requestParameters: GetRemoteImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.imageUrl === null || requestParameters.imageUrl === undefined) {
            throw new runtime.RequiredError('imageUrl','Required parameter requestParameters.imageUrl was null or undefined when calling getRemoteImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.imageUrl !== undefined) {
            queryParameters['imageUrl'] = requestParameters.imageUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Images/Remote`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a remote image.
     */
    async getRemoteImage(requestParameters: GetRemoteImageRequest): Promise<any> {
        const response = await this.getRemoteImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available remote image providers for an item.
     */
    async getRemoteImageProvidersRaw(requestParameters: GetRemoteImageProvidersRequest): Promise<runtime.ApiResponse<Array<ImageProviderInfo>>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getRemoteImageProviders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/RemoteImages/Providers`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageProviderInfoFromJSON));
    }

    /**
     * Gets available remote image providers for an item.
     */
    async getRemoteImageProviders(requestParameters: GetRemoteImageProvidersRequest): Promise<Array<ImageProviderInfo>> {
        const response = await this.getRemoteImageProvidersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets available remote images for an item.
     */
    async getRemoteImagesRaw(requestParameters: GetRemoteImagesRequest): Promise<runtime.ApiResponse<RemoteImageResult>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getRemoteImages.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        if (requestParameters.includeAllLanguages !== undefined) {
            queryParameters['includeAllLanguages'] = requestParameters.includeAllLanguages;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/RemoteImages`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoteImageResultFromJSON(jsonValue));
    }

    /**
     * Gets available remote images for an item.
     */
    async getRemoteImages(requestParameters: GetRemoteImagesRequest): Promise<RemoteImageResult> {
        const response = await this.getRemoteImagesRaw(requestParameters);
        return await response.value();
    }

}
