/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ImageFormat,
    ImageFormatFromJSON,
    ImageFormatToJSON,
    ImageInfo,
    ImageInfoFromJSON,
    ImageInfoToJSON,
    ImageType,
    ImageTypeFromJSON,
    ImageTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface DeleteItemImageRequest {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
}

export interface DeleteItemImage2Request {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
}

export interface DeleteUserImageRequest {
    userId: string;
    imageType: ImageType;
    index: number | null;
    itemType: string;
}

export interface DeleteUserImage2Request {
    userId: string;
    imageType: ImageType;
    index: number | null;
    itemType: string;
}

export interface GetArtistImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetGenreImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetItemImageRequest {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
    maxWidth?: number | null;
    maxHeight?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    tag?: string | null;
    cropWhitespace?: boolean | null;
    format?: ImageFormat;
    addPlayedIndicator?: boolean | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetItemImage2Request {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
    maxWidth?: number | null;
    maxHeight?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    tag?: string | null;
    cropWhitespace?: boolean | null;
    format?: ImageFormat;
    addPlayedIndicator?: boolean | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetItemImage20Request {
    itemId: string;
    imageType: ImageType;
    maxWidth: number;
    maxHeight: number;
    tag: string;
    format: ImageFormat;
    percentPlayed: number;
    unplayedCount: number;
    imageIndex: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetItemImageInfosRequest {
    itemId: string;
}

export interface GetMusicGenreImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetPersonImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetStudioImageRequest {
    name: string;
    imageType: ImageType;
    tag: string;
    format: ImageFormat;
    imageIndex: number | null;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface GetUserImageRequest {
    userId: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadArtistImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadGenreImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadItemImageRequest {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
    maxWidth?: number | null;
    maxHeight?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    tag?: string | null;
    cropWhitespace?: boolean | null;
    format?: ImageFormat;
    addPlayedIndicator?: boolean | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadItemImage2Request {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
    maxWidth?: number | null;
    maxHeight?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    tag?: string | null;
    cropWhitespace?: boolean | null;
    format?: ImageFormat;
    addPlayedIndicator?: boolean | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadItemImage20Request {
    itemId: string;
    imageType: ImageType;
    maxWidth: number;
    maxHeight: number;
    tag: string;
    format: ImageFormat;
    percentPlayed: number;
    unplayedCount: number;
    imageIndex: number;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadMusicGenreImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadPersonImageRequest {
    name: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadStudioImageRequest {
    name: string;
    imageType: ImageType;
    tag: string;
    format: ImageFormat;
    imageIndex: number | null;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface HeadUserImageRequest {
    userId: string;
    imageType: ImageType;
    imageIndex: number | null;
    tag?: string | null;
    format?: ImageFormat;
    maxWidth?: number | null;
    maxHeight?: number | null;
    percentPlayed?: number | null;
    unplayedCount?: number | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    cropWhitespace?: boolean | null;
    addPlayedIndicator?: boolean | null;
    blur?: number | null;
    backgroundColor?: string | null;
    foregroundLayer?: string | null;
}

export interface PostUserImageRequest {
    userId: string;
    imageType: ImageType;
    index: number | null;
}

export interface PostUserImage2Request {
    userId: string;
    imageType: ImageType;
    index: number | null;
}

export interface SetItemImageRequest {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
}

export interface SetItemImage2Request {
    itemId: string;
    imageType: ImageType;
    imageIndex: number | null;
}

export interface UpdateItemImageIndexRequest {
    itemId: string;
    imageType: ImageType;
    imageIndex: number;
    newIndex?: number;
}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI {

    /**
     * Delete an item\'s image.
     */
    async deleteItemImageRaw(requestParameters: DeleteItemImageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteItemImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling deleteItemImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling deleteItemImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an item\'s image.
     */
    async deleteItemImage(requestParameters: DeleteItemImageRequest): Promise<void> {
        await this.deleteItemImageRaw(requestParameters);
    }

    /**
     * Delete an item\'s image.
     */
    async deleteItemImage2Raw(requestParameters: DeleteItemImage2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteItemImage2.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling deleteItemImage2.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling deleteItemImage2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}/{imageIndex}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an item\'s image.
     */
    async deleteItemImage2(requestParameters: DeleteItemImage2Request): Promise<void> {
        await this.deleteItemImage2Raw(requestParameters);
    }

    /**
     * Delete the user\'s image.
     */
    async deleteUserImageRaw(requestParameters: DeleteUserImageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling deleteUserImage.');
        }

        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling deleteUserImage.');
        }

        if (requestParameters.itemType === null || requestParameters.itemType === undefined) {
            throw new runtime.RequiredError('itemType','Required parameter requestParameters.itemType was null or undefined when calling deleteUserImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Users/{userId}/Images/{itemType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))).replace(`{${"itemType"}}`, encodeURIComponent(String(requestParameters.itemType))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the user\'s image.
     */
    async deleteUserImage(requestParameters: DeleteUserImageRequest): Promise<void> {
        await this.deleteUserImageRaw(requestParameters);
    }

    /**
     * Delete the user\'s image.
     */
    async deleteUserImage2Raw(requestParameters: DeleteUserImage2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserImage2.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling deleteUserImage2.');
        }

        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling deleteUserImage2.');
        }

        if (requestParameters.itemType === null || requestParameters.itemType === undefined) {
            throw new runtime.RequiredError('itemType','Required parameter requestParameters.itemType was null or undefined when calling deleteUserImage2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Users/{userId}/Images/{itemType}/{index}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))).replace(`{${"itemType"}}`, encodeURIComponent(String(requestParameters.itemType))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the user\'s image.
     */
    async deleteUserImage2(requestParameters: DeleteUserImage2Request): Promise<void> {
        await this.deleteUserImage2Raw(requestParameters);
    }

    /**
     * Get artist image by name.
     */
    async getArtistImageRaw(requestParameters: GetArtistImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getArtistImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getArtistImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getArtistImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Artists/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get artist image by name.
     */
    async getArtistImage(requestParameters: GetArtistImageRequest): Promise<any> {
        const response = await this.getArtistImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get genre image by name.
     */
    async getGenreImageRaw(requestParameters: GetGenreImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getGenreImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getGenreImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getGenreImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Genres/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get genre image by name.
     */
    async getGenreImage(requestParameters: GetGenreImageRequest): Promise<any> {
        const response = await this.getGenreImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the item\'s image.
     */
    async getItemImageRaw(requestParameters: GetItemImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getItemImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getItemImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets the item\'s image.
     */
    async getItemImage(requestParameters: GetItemImageRequest): Promise<any> {
        const response = await this.getItemImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the item\'s image.
     */
    async getItemImage2Raw(requestParameters: GetItemImage2Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemImage2.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getItemImage2.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getItemImage2.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}/{imageIndex}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets the item\'s image.
     */
    async getItemImage2(requestParameters: GetItemImage2Request): Promise<any> {
        const response = await this.getItemImage2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the item\'s image.
     */
    async getItemImage2_1Raw(requestParameters: GetItemImage20Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.maxWidth === null || requestParameters.maxWidth === undefined) {
            throw new runtime.RequiredError('maxWidth','Required parameter requestParameters.maxWidth was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.maxHeight === null || requestParameters.maxHeight === undefined) {
            throw new runtime.RequiredError('maxHeight','Required parameter requestParameters.maxHeight was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.percentPlayed === null || requestParameters.percentPlayed === undefined) {
            throw new runtime.RequiredError('percentPlayed','Required parameter requestParameters.percentPlayed was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.unplayedCount === null || requestParameters.unplayedCount === undefined) {
            throw new runtime.RequiredError('unplayedCount','Required parameter requestParameters.unplayedCount was null or undefined when calling getItemImage2_1.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getItemImage2_1.');
        }

        const queryParameters: any = {};

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"maxWidth"}}`, encodeURIComponent(String(requestParameters.maxWidth))).replace(`{${"maxHeight"}}`, encodeURIComponent(String(requestParameters.maxHeight))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))).replace(`{${"percentPlayed"}}`, encodeURIComponent(String(requestParameters.percentPlayed))).replace(`{${"unplayedCount"}}`, encodeURIComponent(String(requestParameters.unplayedCount))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets the item\'s image.
     */
    async getItemImage2_1(requestParameters: GetItemImage20Request): Promise<any> {
        const response = await this.getItemImage2_1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get item image infos.
     */
    async getItemImageInfosRaw(requestParameters: GetItemImageInfosRequest): Promise<runtime.ApiResponse<Array<ImageInfo>>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemImageInfos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageInfoFromJSON));
    }

    /**
     * Get item image infos.
     */
    async getItemImageInfos(requestParameters: GetItemImageInfosRequest): Promise<Array<ImageInfo>> {
        const response = await this.getItemImageInfosRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get music genre image by name.
     */
    async getMusicGenreImageRaw(requestParameters: GetMusicGenreImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getMusicGenreImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getMusicGenreImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getMusicGenreImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/MusicGenres/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get music genre image by name.
     */
    async getMusicGenreImage(requestParameters: GetMusicGenreImageRequest): Promise<any> {
        const response = await this.getMusicGenreImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get person image by name.
     */
    async getPersonImageRaw(requestParameters: GetPersonImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getPersonImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getPersonImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getPersonImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Persons/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get person image by name.
     */
    async getPersonImage(requestParameters: GetPersonImageRequest): Promise<any> {
        const response = await this.getPersonImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get studio image by name.
     */
    async getStudioImageRaw(requestParameters: GetStudioImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getStudioImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getStudioImage.');
        }

        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling getStudioImage.');
        }

        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling getStudioImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getStudioImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Studios/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get studio image by name.
     */
    async getStudioImage(requestParameters: GetStudioImageRequest): Promise<any> {
        const response = await this.getStudioImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user profile image.
     */
    async getUserImageRaw(requestParameters: GetUserImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling getUserImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling getUserImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Users/{userId}/Images/{imageType}/{imageIndex}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get user profile image.
     */
    async getUserImage(requestParameters: GetUserImageRequest): Promise<any> {
        const response = await this.getUserImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get artist image by name.
     */
    async headArtistImageRaw(requestParameters: HeadArtistImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling headArtistImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headArtistImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headArtistImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Artists/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get artist image by name.
     */
    async headArtistImage(requestParameters: HeadArtistImageRequest): Promise<any> {
        const response = await this.headArtistImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get genre image by name.
     */
    async headGenreImageRaw(requestParameters: HeadGenreImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling headGenreImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headGenreImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headGenreImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Genres/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get genre image by name.
     */
    async headGenreImage(requestParameters: HeadGenreImageRequest): Promise<any> {
        const response = await this.headGenreImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the item\'s image.
     */
    async headItemImageRaw(requestParameters: HeadItemImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling headItemImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headItemImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headItemImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets the item\'s image.
     */
    async headItemImage(requestParameters: HeadItemImageRequest): Promise<any> {
        const response = await this.headItemImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the item\'s image.
     */
    async headItemImage2Raw(requestParameters: HeadItemImage2Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling headItemImage2.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headItemImage2.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headItemImage2.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}/{imageIndex}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets the item\'s image.
     */
    async headItemImage2(requestParameters: HeadItemImage2Request): Promise<any> {
        const response = await this.headItemImage2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the item\'s image.
     */
    async headItemImage2_2Raw(requestParameters: HeadItemImage20Request): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.maxWidth === null || requestParameters.maxWidth === undefined) {
            throw new runtime.RequiredError('maxWidth','Required parameter requestParameters.maxWidth was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.maxHeight === null || requestParameters.maxHeight === undefined) {
            throw new runtime.RequiredError('maxHeight','Required parameter requestParameters.maxHeight was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.percentPlayed === null || requestParameters.percentPlayed === undefined) {
            throw new runtime.RequiredError('percentPlayed','Required parameter requestParameters.percentPlayed was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.unplayedCount === null || requestParameters.unplayedCount === undefined) {
            throw new runtime.RequiredError('unplayedCount','Required parameter requestParameters.unplayedCount was null or undefined when calling headItemImage2_2.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headItemImage2_2.');
        }

        const queryParameters: any = {};

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"maxWidth"}}`, encodeURIComponent(String(requestParameters.maxWidth))).replace(`{${"maxHeight"}}`, encodeURIComponent(String(requestParameters.maxHeight))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))).replace(`{${"percentPlayed"}}`, encodeURIComponent(String(requestParameters.percentPlayed))).replace(`{${"unplayedCount"}}`, encodeURIComponent(String(requestParameters.unplayedCount))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets the item\'s image.
     */
    async headItemImage2_2(requestParameters: HeadItemImage20Request): Promise<any> {
        const response = await this.headItemImage2_2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get music genre image by name.
     */
    async headMusicGenreImageRaw(requestParameters: HeadMusicGenreImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling headMusicGenreImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headMusicGenreImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headMusicGenreImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/MusicGenres/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get music genre image by name.
     */
    async headMusicGenreImage(requestParameters: HeadMusicGenreImageRequest): Promise<any> {
        const response = await this.headMusicGenreImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get person image by name.
     */
    async headPersonImageRaw(requestParameters: HeadPersonImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling headPersonImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headPersonImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headPersonImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Persons/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get person image by name.
     */
    async headPersonImage(requestParameters: HeadPersonImageRequest): Promise<any> {
        const response = await this.headPersonImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get studio image by name.
     */
    async headStudioImageRaw(requestParameters: HeadStudioImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling headStudioImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headStudioImage.');
        }

        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling headStudioImage.');
        }

        if (requestParameters.format === null || requestParameters.format === undefined) {
            throw new runtime.RequiredError('format','Required parameter requestParameters.format was null or undefined when calling headStudioImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headStudioImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Studios/{name}/Images/{imageType}/{imageIndex}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"tag"}}`, encodeURIComponent(String(requestParameters.tag))).replace(`{${"format"}}`, encodeURIComponent(String(requestParameters.format))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get studio image by name.
     */
    async headStudioImage(requestParameters: HeadStudioImageRequest): Promise<any> {
        const response = await this.headStudioImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user profile image.
     */
    async headUserImageRaw(requestParameters: HeadUserImageRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling headUserImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling headUserImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling headUserImage.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.percentPlayed !== undefined) {
            queryParameters['percentPlayed'] = requestParameters.percentPlayed;
        }

        if (requestParameters.unplayedCount !== undefined) {
            queryParameters['unplayedCount'] = requestParameters.unplayedCount;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.cropWhitespace !== undefined) {
            queryParameters['cropWhitespace'] = requestParameters.cropWhitespace;
        }

        if (requestParameters.addPlayedIndicator !== undefined) {
            queryParameters['addPlayedIndicator'] = requestParameters.addPlayedIndicator;
        }

        if (requestParameters.blur !== undefined) {
            queryParameters['blur'] = requestParameters.blur;
        }

        if (requestParameters.backgroundColor !== undefined) {
            queryParameters['backgroundColor'] = requestParameters.backgroundColor;
        }

        if (requestParameters.foregroundLayer !== undefined) {
            queryParameters['foregroundLayer'] = requestParameters.foregroundLayer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Users/{userId}/Images/{imageType}/{imageIndex}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get user profile image.
     */
    async headUserImage(requestParameters: HeadUserImageRequest): Promise<any> {
        const response = await this.headUserImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets the user image.
     */
    async postUserImageRaw(requestParameters: PostUserImageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling postUserImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling postUserImage.');
        }

        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling postUserImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Users/{userId}/Images/{imageType}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the user image.
     */
    async postUserImage(requestParameters: PostUserImageRequest): Promise<void> {
        await this.postUserImageRaw(requestParameters);
    }

    /**
     * Sets the user image.
     */
    async postUserImage2Raw(requestParameters: PostUserImage2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling postUserImage2.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling postUserImage2.');
        }

        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling postUserImage2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Users/{userId}/Images/{imageType}/{index}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the user image.
     */
    async postUserImage2(requestParameters: PostUserImage2Request): Promise<void> {
        await this.postUserImage2Raw(requestParameters);
    }

    /**
     * Set item image.
     */
    async setItemImageRaw(requestParameters: SetItemImageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling setItemImage.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling setItemImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling setItemImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set item image.
     */
    async setItemImage(requestParameters: SetItemImageRequest): Promise<void> {
        await this.setItemImageRaw(requestParameters);
    }

    /**
     * Set item image.
     */
    async setItemImage2Raw(requestParameters: SetItemImage2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling setItemImage2.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling setItemImage2.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling setItemImage2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}/{imageIndex}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set item image.
     */
    async setItemImage2(requestParameters: SetItemImage2Request): Promise<void> {
        await this.setItemImage2Raw(requestParameters);
    }

    /**
     * Updates the index for an item image.
     */
    async updateItemImageIndexRaw(requestParameters: UpdateItemImageIndexRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateItemImageIndex.');
        }

        if (requestParameters.imageType === null || requestParameters.imageType === undefined) {
            throw new runtime.RequiredError('imageType','Required parameter requestParameters.imageType was null or undefined when calling updateItemImageIndex.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling updateItemImageIndex.');
        }

        const queryParameters: any = {};

        if (requestParameters.newIndex !== undefined) {
            queryParameters['newIndex'] = requestParameters.newIndex;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Items/{itemId}/Images/{imageType}/{imageIndex}/Index`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"imageType"}}`, encodeURIComponent(String(requestParameters.imageType))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the index for an item image.
     */
    async updateItemImageIndex(requestParameters: UpdateItemImageIndexRequest): Promise<void> {
        await this.updateItemImageIndexRaw(requestParameters);
    }

}
