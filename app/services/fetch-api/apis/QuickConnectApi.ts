/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QuickConnectResult,
    QuickConnectResultFromJSON,
    QuickConnectResultToJSON,
    QuickConnectState,
    QuickConnectStateFromJSON,
    QuickConnectStateToJSON,
} from '../models';

export interface AuthorizeRequest {
    code: string;
}

export interface AvailableRequest {
    status?: QuickConnectState;
}

export interface ConnectRequest {
    secret: string;
}

/**
 * 
 */
export class QuickConnectApi extends runtime.BaseAPI {

    /**
     * Temporarily activates quick connect for five minutes.
     */
    async activateRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/QuickConnect/Activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Temporarily activates quick connect for five minutes.
     */
    async activate(): Promise<void> {
        await this.activateRaw();
    }

    /**
     * Authorizes a pending quick connect request.
     */
    async authorizeRaw(requestParameters: AuthorizeRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling authorize.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/QuickConnect/Authorize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Authorizes a pending quick connect request.
     */
    async authorize(requestParameters: AuthorizeRequest): Promise<boolean> {
        const response = await this.authorizeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Enables or disables quick connect.
     */
    async availableRaw(requestParameters: AvailableRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/QuickConnect/Available`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Enables or disables quick connect.
     */
    async available(requestParameters: AvailableRequest): Promise<void> {
        await this.availableRaw(requestParameters);
    }

    /**
     * Attempts to retrieve authentication information.
     */
    async connectRaw(requestParameters: ConnectRequest): Promise<runtime.ApiResponse<QuickConnectResult>> {
        if (requestParameters.secret === null || requestParameters.secret === undefined) {
            throw new runtime.RequiredError('secret','Required parameter requestParameters.secret was null or undefined when calling connect.');
        }

        const queryParameters: any = {};

        if (requestParameters.secret !== undefined) {
            queryParameters['secret'] = requestParameters.secret;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/QuickConnect/Connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QuickConnectResultFromJSON(jsonValue));
    }

    /**
     * Attempts to retrieve authentication information.
     */
    async connect(requestParameters: ConnectRequest): Promise<QuickConnectResult> {
        const response = await this.connectRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deauthorize all quick connect devices for the current user.
     */
    async deauthorizeRaw(): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/QuickConnect/Deauthorize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deauthorize all quick connect devices for the current user.
     */
    async deauthorize(): Promise<number> {
        const response = await this.deauthorizeRaw();
        return await response.value();
    }

    /**
     * Gets the current quick connect state.
     */
    async getStatusRaw(): Promise<runtime.ApiResponse<QuickConnectState>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/QuickConnect/Status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QuickConnectStateFromJSON(jsonValue));
    }

    /**
     * Gets the current quick connect state.
     */
    async getStatus(): Promise<QuickConnectState> {
        const response = await this.getStatusRaw();
        return await response.value();
    }

    /**
     * Initiate a new quick connect request.
     */
    async initiateRaw(): Promise<runtime.ApiResponse<QuickConnectResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/QuickConnect/Initiate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QuickConnectResultFromJSON(jsonValue));
    }

    /**
     * Initiate a new quick connect request.
     */
    async initiate(): Promise<QuickConnectResult> {
        const response = await this.initiateRaw();
        return await response.value();
    }

}
