/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddVirtualFolderDto,
    AddVirtualFolderDtoFromJSON,
    AddVirtualFolderDtoToJSON,
    MediaPathDto,
    MediaPathDtoFromJSON,
    MediaPathDtoToJSON,
    MediaPathInfo,
    MediaPathInfoFromJSON,
    MediaPathInfoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateLibraryOptionsDto,
    UpdateLibraryOptionsDtoFromJSON,
    UpdateLibraryOptionsDtoToJSON,
    VirtualFolderInfo,
    VirtualFolderInfoFromJSON,
    VirtualFolderInfoToJSON,
} from '../models';

export interface AddMediaPathRequest {
    mediaPathDto: MediaPathDto;
    refreshLibrary?: boolean;
}

export interface AddVirtualFolderRequest {
    name?: string | null;
    collectionType?: string | null;
    paths?: Array<string> | null;
    refreshLibrary?: boolean;
    addVirtualFolderDto?: AddVirtualFolderDto;
}

export interface RemoveMediaPathRequest {
    name?: string | null;
    path?: string | null;
    refreshLibrary?: boolean;
}

export interface RemoveVirtualFolderRequest {
    name?: string | null;
    refreshLibrary?: boolean;
}

export interface RenameVirtualFolderRequest {
    name?: string | null;
    newName?: string | null;
    refreshLibrary?: boolean;
}

export interface UpdateLibraryOptionsRequest {
    updateLibraryOptionsDto?: UpdateLibraryOptionsDto;
}

export interface UpdateMediaPathRequest {
    name?: string | null;
    mediaPathInfo?: MediaPathInfo;
}

/**
 * 
 */
export class LibraryStructureApi extends runtime.BaseAPI {

    /**
     * Add a media path to a library.
     */
    async addMediaPathRaw(requestParameters: AddMediaPathRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.mediaPathDto === null || requestParameters.mediaPathDto === undefined) {
            throw new runtime.RequiredError('mediaPathDto','Required parameter requestParameters.mediaPathDto was null or undefined when calling addMediaPath.');
        }

        const queryParameters: any = {};

        if (requestParameters.refreshLibrary !== undefined) {
            queryParameters['refreshLibrary'] = requestParameters.refreshLibrary;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders/Paths`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MediaPathDtoToJSON(requestParameters.mediaPathDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a media path to a library.
     */
    async addMediaPath(requestParameters: AddMediaPathRequest): Promise<void> {
        await this.addMediaPathRaw(requestParameters);
    }

    /**
     * Adds a virtual folder.
     */
    async addVirtualFolderRaw(requestParameters: AddVirtualFolderRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.collectionType !== undefined) {
            queryParameters['collectionType'] = requestParameters.collectionType;
        }

        if (requestParameters.paths) {
            queryParameters['paths'] = requestParameters.paths;
        }

        if (requestParameters.refreshLibrary !== undefined) {
            queryParameters['refreshLibrary'] = requestParameters.refreshLibrary;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddVirtualFolderDtoToJSON(requestParameters.addVirtualFolderDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a virtual folder.
     */
    async addVirtualFolder(requestParameters: AddVirtualFolderRequest): Promise<void> {
        await this.addVirtualFolderRaw(requestParameters);
    }

    /**
     * Gets all virtual folders.
     */
    async getVirtualFoldersRaw(): Promise<runtime.ApiResponse<Array<VirtualFolderInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirtualFolderInfoFromJSON));
    }

    /**
     * Gets all virtual folders.
     */
    async getVirtualFolders(): Promise<Array<VirtualFolderInfo>> {
        const response = await this.getVirtualFoldersRaw();
        return await response.value();
    }

    /**
     * Remove a media path.
     */
    async removeMediaPathRaw(requestParameters: RemoveMediaPathRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.refreshLibrary !== undefined) {
            queryParameters['refreshLibrary'] = requestParameters.refreshLibrary;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders/Paths`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a media path.
     */
    async removeMediaPath(requestParameters: RemoveMediaPathRequest): Promise<void> {
        await this.removeMediaPathRaw(requestParameters);
    }

    /**
     * Removes a virtual folder.
     */
    async removeVirtualFolderRaw(requestParameters: RemoveVirtualFolderRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.refreshLibrary !== undefined) {
            queryParameters['refreshLibrary'] = requestParameters.refreshLibrary;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a virtual folder.
     */
    async removeVirtualFolder(requestParameters: RemoveVirtualFolderRequest): Promise<void> {
        await this.removeVirtualFolderRaw(requestParameters);
    }

    /**
     * Renames a virtual folder.
     */
    async renameVirtualFolderRaw(requestParameters: RenameVirtualFolderRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.newName !== undefined) {
            queryParameters['newName'] = requestParameters.newName;
        }

        if (requestParameters.refreshLibrary !== undefined) {
            queryParameters['refreshLibrary'] = requestParameters.refreshLibrary;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders/Name`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames a virtual folder.
     */
    async renameVirtualFolder(requestParameters: RenameVirtualFolderRequest): Promise<void> {
        await this.renameVirtualFolderRaw(requestParameters);
    }

    /**
     * Update library options.
     */
    async updateLibraryOptionsRaw(requestParameters: UpdateLibraryOptionsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders/LibraryOptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLibraryOptionsDtoToJSON(requestParameters.updateLibraryOptionsDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update library options.
     */
    async updateLibraryOptions(requestParameters: UpdateLibraryOptionsRequest): Promise<void> {
        await this.updateLibraryOptionsRaw(requestParameters);
    }

    /**
     * Updates a media path.
     */
    async updateMediaPathRaw(requestParameters: UpdateMediaPathRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Library/VirtualFolders/Paths/Update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MediaPathInfoToJSON(requestParameters.mediaPathInfo),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a media path.
     */
    async updateMediaPath(requestParameters: UpdateMediaPathRequest): Promise<void> {
        await this.updateMediaPathRaw(requestParameters);
    }

}
