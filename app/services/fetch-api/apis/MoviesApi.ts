/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ItemFields,
    ItemFieldsFromJSON,
    ItemFieldsToJSON,
    RecommendationDto,
    RecommendationDtoFromJSON,
    RecommendationDtoToJSON,
} from '../models';

export interface GetMovieRecommendationsRequest {
    userId?: string | null;
    parentId?: string | null;
    fields?: Array<ItemFields> | null;
    categoryLimit?: number;
    itemLimit?: number;
}

/**
 * 
 */
export class MoviesApi extends runtime.BaseAPI {

    /**
     * Gets movie recommendations.
     */
    async getMovieRecommendationsRaw(requestParameters: GetMovieRecommendationsRequest): Promise<runtime.ApiResponse<Array<RecommendationDto>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.parentId !== undefined) {
            queryParameters['parentId'] = requestParameters.parentId;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.categoryLimit !== undefined) {
            queryParameters['categoryLimit'] = requestParameters.categoryLimit;
        }

        if (requestParameters.itemLimit !== undefined) {
            queryParameters['itemLimit'] = requestParameters.itemLimit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Movies/Recommendations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecommendationDtoFromJSON));
    }

    /**
     * Gets movie recommendations.
     */
    async getMovieRecommendations(requestParameters: GetMovieRecommendationsRequest): Promise<Array<RecommendationDto>> {
        const response = await this.getMovieRecommendationsRaw(requestParameters);
        return await response.value();
    }

}
