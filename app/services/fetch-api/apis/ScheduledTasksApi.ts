/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IScheduledTaskWorker,
    IScheduledTaskWorkerFromJSON,
    IScheduledTaskWorkerToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TaskInfo,
    TaskInfoFromJSON,
    TaskInfoToJSON,
    TaskTriggerInfo,
    TaskTriggerInfoFromJSON,
    TaskTriggerInfoToJSON,
} from '../models';

export interface GetTaskRequest {
    taskId: string;
}

export interface GetTasksRequest {
    isHidden?: boolean | null;
    isEnabled?: boolean | null;
}

export interface StartTaskRequest {
    taskId: string;
}

export interface StopTaskRequest {
    taskId: string;
}

export interface UpdateTaskRequest {
    taskId: string;
    taskTriggerInfo: Array<TaskTriggerInfo>;
}

/**
 * 
 */
export class ScheduledTasksApi extends runtime.BaseAPI {

    /**
     * Get task by id.
     */
    async getTaskRaw(requestParameters: GetTaskRequest): Promise<runtime.ApiResponse<TaskInfo>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/ScheduledTasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskInfoFromJSON(jsonValue));
    }

    /**
     * Get task by id.
     */
    async getTask(requestParameters: GetTaskRequest): Promise<TaskInfo> {
        const response = await this.getTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get tasks.
     */
    async getTasksRaw(requestParameters: GetTasksRequest): Promise<runtime.ApiResponse<Array<IScheduledTaskWorker>>> {
        const queryParameters: any = {};

        if (requestParameters.isHidden !== undefined) {
            queryParameters['isHidden'] = requestParameters.isHidden;
        }

        if (requestParameters.isEnabled !== undefined) {
            queryParameters['isEnabled'] = requestParameters.isEnabled;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/ScheduledTasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IScheduledTaskWorkerFromJSON));
    }

    /**
     * Get tasks.
     */
    async getTasks(requestParameters: GetTasksRequest): Promise<Array<IScheduledTaskWorker>> {
        const response = await this.getTasksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Start specified task.
     */
    async startTaskRaw(requestParameters: StartTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling startTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/ScheduledTasks/Running/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start specified task.
     */
    async startTask(requestParameters: StartTaskRequest): Promise<void> {
        await this.startTaskRaw(requestParameters);
    }

    /**
     * Stop specified task.
     */
    async stopTaskRaw(requestParameters: StopTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling stopTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/ScheduledTasks/Running/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stop specified task.
     */
    async stopTask(requestParameters: StopTaskRequest): Promise<void> {
        await this.stopTaskRaw(requestParameters);
    }

    /**
     * Update specified task triggers.
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling updateTask.');
        }

        if (requestParameters.taskTriggerInfo === null || requestParameters.taskTriggerInfo === undefined) {
            throw new runtime.RequiredError('taskTriggerInfo','Required parameter requestParameters.taskTriggerInfo was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/ScheduledTasks/{taskId}/Triggers`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.taskTriggerInfo.map(TaskTriggerInfoToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update specified task triggers.
     */
    async updateTask(requestParameters: UpdateTaskRequest): Promise<void> {
        await this.updateTaskRaw(requestParameters);
    }

}
