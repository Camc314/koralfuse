/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConfigurationPageInfo,
    ConfigurationPageInfoFromJSON,
    ConfigurationPageInfoToJSON,
    ConfigurationPageType,
    ConfigurationPageTypeFromJSON,
    ConfigurationPageTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface GetConfigurationPagesRequest {
    enableInMainMenu?: boolean | null;
    pageType?: ConfigurationPageType;
}

export interface GetDashboardConfigurationPageRequest {
    name?: string | null;
}

/**
 * 
 */
export class DashboardApi extends runtime.BaseAPI {

    /**
     * Gets the configuration pages.
     */
    async getConfigurationPagesRaw(requestParameters: GetConfigurationPagesRequest): Promise<runtime.ApiResponse<Array<ConfigurationPageInfo>>> {
        const queryParameters: any = {};

        if (requestParameters.enableInMainMenu !== undefined) {
            queryParameters['enableInMainMenu'] = requestParameters.enableInMainMenu;
        }

        if (requestParameters.pageType !== undefined) {
            queryParameters['pageType'] = requestParameters.pageType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/web/ConfigurationPages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConfigurationPageInfoFromJSON));
    }

    /**
     * Gets the configuration pages.
     */
    async getConfigurationPages(requestParameters: GetConfigurationPagesRequest): Promise<Array<ConfigurationPageInfo>> {
        const response = await this.getConfigurationPagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a dashboard configuration page.
     */
    async getDashboardConfigurationPageRaw(requestParameters: GetDashboardConfigurationPageRequest): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/web/ConfigurationPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a dashboard configuration page.
     */
    async getDashboardConfigurationPage(requestParameters: GetDashboardConfigurationPageRequest): Promise<any> {
        const response = await this.getDashboardConfigurationPageRaw(requestParameters);
        return await response.value();
    }

}
