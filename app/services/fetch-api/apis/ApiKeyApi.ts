/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthenticationInfoQueryResult,
    AuthenticationInfoQueryResultFromJSON,
    AuthenticationInfoQueryResultToJSON,
} from '../models';

export interface CreateKeyRequest {
    app: string;
}

export interface RevokeKeyRequest {
    key: string;
}

/**
 * 
 */
export class ApiKeyApi extends runtime.BaseAPI {

    /**
     * Create a new api key.
     */
    async createKeyRaw(requestParameters: CreateKeyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.app === null || requestParameters.app === undefined) {
            throw new runtime.RequiredError('app','Required parameter requestParameters.app was null or undefined when calling createKey.');
        }

        const queryParameters: any = {};

        if (requestParameters.app !== undefined) {
            queryParameters['app'] = requestParameters.app;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Auth/Keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new api key.
     */
    async createKey(requestParameters: CreateKeyRequest): Promise<void> {
        await this.createKeyRaw(requestParameters);
    }

    /**
     * Get all keys.
     */
    async getKeysRaw(): Promise<runtime.ApiResponse<AuthenticationInfoQueryResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Auth/Keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationInfoQueryResultFromJSON(jsonValue));
    }

    /**
     * Get all keys.
     */
    async getKeys(): Promise<AuthenticationInfoQueryResult> {
        const response = await this.getKeysRaw();
        return await response.value();
    }

    /**
     * Remove an api key.
     */
    async revokeKeyRaw(requestParameters: RevokeKeyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling revokeKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Auth/Keys/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an api key.
     */
    async revokeKey(requestParameters: RevokeKeyRequest): Promise<void> {
        await this.revokeKeyRaw(requestParameters);
    }

}
