/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EncodingContext,
    EncodingContextFromJSON,
    EncodingContextToJSON,
    SubtitleDeliveryMethod,
    SubtitleDeliveryMethodFromJSON,
    SubtitleDeliveryMethodToJSON,
} from '../models';

export interface GetHlsAudioSegmentRequest {
    itemId: string;
    playlistId: string;
    segmentId: number;
    container: string | null;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    mediaSourceId?: string | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    maxStreamingBitrate?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
}

export interface GetHlsVideoSegmentRequest {
    itemId: string;
    playlistId: string;
    segmentId: number;
    container: string | null;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    mediaSourceId?: string | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
}

export interface GetMasterHlsAudioPlaylistRequest {
    itemId: string;
    mediaSourceId: string;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    maxStreamingBitrate?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
    enableAdaptiveBitrateStreaming?: boolean;
}

export interface GetMasterHlsVideoPlaylistRequest {
    itemId: string;
    mediaSourceId: string;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
    enableAdaptiveBitrateStreaming?: boolean;
}

export interface GetVariantHlsAudioPlaylistRequest {
    itemId: string;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    mediaSourceId?: string | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    maxStreamingBitrate?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
}

export interface GetVariantHlsVideoPlaylistRequest {
    itemId: string;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    mediaSourceId?: string | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
}

export interface HeadMasterHlsAudioPlaylistRequest {
    itemId: string;
    mediaSourceId: string;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    maxStreamingBitrate?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
    enableAdaptiveBitrateStreaming?: boolean;
}

export interface HeadMasterHlsVideoPlaylistRequest {
    itemId: string;
    mediaSourceId: string;
    _static?: boolean | null;
    params?: string | null;
    tag?: string | null;
    deviceProfileId?: string | null;
    playSessionId?: string | null;
    segmentContainer?: string | null;
    segmentLength?: number | null;
    minSegments?: number | null;
    deviceId?: string | null;
    audioCodec?: string | null;
    enableAutoStreamCopy?: boolean | null;
    allowVideoStreamCopy?: boolean | null;
    allowAudioStreamCopy?: boolean | null;
    breakOnNonKeyFrames?: boolean | null;
    audioSampleRate?: number | null;
    maxAudioBitDepth?: number | null;
    audioBitRate?: number | null;
    audioChannels?: number | null;
    maxAudioChannels?: number | null;
    profile?: string | null;
    level?: string | null;
    framerate?: number | null;
    maxFramerate?: number | null;
    copyTimestamps?: boolean | null;
    startTimeTicks?: number | null;
    width?: number | null;
    height?: number | null;
    videoBitRate?: number | null;
    subtitleStreamIndex?: number | null;
    subtitleMethod?: SubtitleDeliveryMethod;
    maxRefFrames?: number | null;
    maxVideoBitDepth?: number | null;
    requireAvc?: boolean | null;
    deInterlace?: boolean | null;
    requireNonAnamorphic?: boolean | null;
    transcodingMaxAudioChannels?: number | null;
    cpuCoreLimit?: number | null;
    liveStreamId?: string | null;
    enableMpegtsM2TsMode?: boolean | null;
    videoCodec?: string | null;
    subtitleCodec?: string | null;
    transcodingReasons?: string | null;
    audioStreamIndex?: number | null;
    videoStreamIndex?: number | null;
    context?: EncodingContext;
    streamOptions?: { [key: string]: string; } | null;
    enableAdaptiveBitrateStreaming?: boolean;
}

/**
 * 
 */
export class DynamicHlsApi extends runtime.BaseAPI {

    /**
     * Gets a video stream using HTTP live streaming.
     */
    async getHlsAudioSegmentRaw(requestParameters: GetHlsAudioSegmentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getHlsAudioSegment.');
        }

        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling getHlsAudioSegment.');
        }

        if (requestParameters.segmentId === null || requestParameters.segmentId === undefined) {
            throw new runtime.RequiredError('segmentId','Required parameter requestParameters.segmentId was null or undefined when calling getHlsAudioSegment.');
        }

        if (requestParameters.container === null || requestParameters.container === undefined) {
            throw new runtime.RequiredError('container','Required parameter requestParameters.container was null or undefined when calling getHlsAudioSegment.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.maxStreamingBitrate !== undefined) {
            queryParameters['maxStreamingBitrate'] = requestParameters.maxStreamingBitrate;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))).replace(`{${"segmentId"}}`, encodeURIComponent(String(requestParameters.segmentId))).replace(`{${"container"}}`, encodeURIComponent(String(requestParameters.container))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a video stream using HTTP live streaming.
     */
    async getHlsAudioSegment(requestParameters: GetHlsAudioSegmentRequest): Promise<any> {
        const response = await this.getHlsAudioSegmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a video stream using HTTP live streaming.
     */
    async getHlsVideoSegmentRaw(requestParameters: GetHlsVideoSegmentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getHlsVideoSegment.');
        }

        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling getHlsVideoSegment.');
        }

        if (requestParameters.segmentId === null || requestParameters.segmentId === undefined) {
            throw new runtime.RequiredError('segmentId','Required parameter requestParameters.segmentId was null or undefined when calling getHlsVideoSegment.');
        }

        if (requestParameters.container === null || requestParameters.container === undefined) {
            throw new runtime.RequiredError('container','Required parameter requestParameters.container was null or undefined when calling getHlsVideoSegment.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))).replace(`{${"segmentId"}}`, encodeURIComponent(String(requestParameters.segmentId))).replace(`{${"container"}}`, encodeURIComponent(String(requestParameters.container))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a video stream using HTTP live streaming.
     */
    async getHlsVideoSegment(requestParameters: GetHlsVideoSegmentRequest): Promise<any> {
        const response = await this.getHlsVideoSegmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets an audio hls playlist stream.
     */
    async getMasterHlsAudioPlaylistRaw(requestParameters: GetMasterHlsAudioPlaylistRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getMasterHlsAudioPlaylist.');
        }

        if (requestParameters.mediaSourceId === null || requestParameters.mediaSourceId === undefined) {
            throw new runtime.RequiredError('mediaSourceId','Required parameter requestParameters.mediaSourceId was null or undefined when calling getMasterHlsAudioPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.maxStreamingBitrate !== undefined) {
            queryParameters['maxStreamingBitrate'] = requestParameters.maxStreamingBitrate;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        if (requestParameters.enableAdaptiveBitrateStreaming !== undefined) {
            queryParameters['enableAdaptiveBitrateStreaming'] = requestParameters.enableAdaptiveBitrateStreaming;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Audio/{itemId}/master.m3u8`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets an audio hls playlist stream.
     */
    async getMasterHlsAudioPlaylist(requestParameters: GetMasterHlsAudioPlaylistRequest): Promise<any> {
        const response = await this.getMasterHlsAudioPlaylistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a video hls playlist stream.
     */
    async getMasterHlsVideoPlaylistRaw(requestParameters: GetMasterHlsVideoPlaylistRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getMasterHlsVideoPlaylist.');
        }

        if (requestParameters.mediaSourceId === null || requestParameters.mediaSourceId === undefined) {
            throw new runtime.RequiredError('mediaSourceId','Required parameter requestParameters.mediaSourceId was null or undefined when calling getMasterHlsVideoPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        if (requestParameters.enableAdaptiveBitrateStreaming !== undefined) {
            queryParameters['enableAdaptiveBitrateStreaming'] = requestParameters.enableAdaptiveBitrateStreaming;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Videos/{itemId}/master.m3u8`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a video hls playlist stream.
     */
    async getMasterHlsVideoPlaylist(requestParameters: GetMasterHlsVideoPlaylistRequest): Promise<any> {
        const response = await this.getMasterHlsVideoPlaylistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets an audio stream using HTTP live streaming.
     */
    async getVariantHlsAudioPlaylistRaw(requestParameters: GetVariantHlsAudioPlaylistRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getVariantHlsAudioPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.maxStreamingBitrate !== undefined) {
            queryParameters['maxStreamingBitrate'] = requestParameters.maxStreamingBitrate;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Audio/{itemId}/main.m3u8`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets an audio stream using HTTP live streaming.
     */
    async getVariantHlsAudioPlaylist(requestParameters: GetVariantHlsAudioPlaylistRequest): Promise<any> {
        const response = await this.getVariantHlsAudioPlaylistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a video stream using HTTP live streaming.
     */
    async getVariantHlsVideoPlaylistRaw(requestParameters: GetVariantHlsVideoPlaylistRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getVariantHlsVideoPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Videos/{itemId}/main.m3u8`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a video stream using HTTP live streaming.
     */
    async getVariantHlsVideoPlaylist(requestParameters: GetVariantHlsVideoPlaylistRequest): Promise<any> {
        const response = await this.getVariantHlsVideoPlaylistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets an audio hls playlist stream.
     */
    async headMasterHlsAudioPlaylistRaw(requestParameters: HeadMasterHlsAudioPlaylistRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling headMasterHlsAudioPlaylist.');
        }

        if (requestParameters.mediaSourceId === null || requestParameters.mediaSourceId === undefined) {
            throw new runtime.RequiredError('mediaSourceId','Required parameter requestParameters.mediaSourceId was null or undefined when calling headMasterHlsAudioPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.maxStreamingBitrate !== undefined) {
            queryParameters['maxStreamingBitrate'] = requestParameters.maxStreamingBitrate;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        if (requestParameters.enableAdaptiveBitrateStreaming !== undefined) {
            queryParameters['enableAdaptiveBitrateStreaming'] = requestParameters.enableAdaptiveBitrateStreaming;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Audio/{itemId}/master.m3u8`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets an audio hls playlist stream.
     */
    async headMasterHlsAudioPlaylist(requestParameters: HeadMasterHlsAudioPlaylistRequest): Promise<any> {
        const response = await this.headMasterHlsAudioPlaylistRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a video hls playlist stream.
     */
    async headMasterHlsVideoPlaylistRaw(requestParameters: HeadMasterHlsVideoPlaylistRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling headMasterHlsVideoPlaylist.');
        }

        if (requestParameters.mediaSourceId === null || requestParameters.mediaSourceId === undefined) {
            throw new runtime.RequiredError('mediaSourceId','Required parameter requestParameters.mediaSourceId was null or undefined when calling headMasterHlsVideoPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters._static !== undefined) {
            queryParameters['static'] = requestParameters._static;
        }

        if (requestParameters.params !== undefined) {
            queryParameters['params'] = requestParameters.params;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        if (requestParameters.deviceProfileId !== undefined) {
            queryParameters['deviceProfileId'] = requestParameters.deviceProfileId;
        }

        if (requestParameters.playSessionId !== undefined) {
            queryParameters['playSessionId'] = requestParameters.playSessionId;
        }

        if (requestParameters.segmentContainer !== undefined) {
            queryParameters['segmentContainer'] = requestParameters.segmentContainer;
        }

        if (requestParameters.segmentLength !== undefined) {
            queryParameters['segmentLength'] = requestParameters.segmentLength;
        }

        if (requestParameters.minSegments !== undefined) {
            queryParameters['minSegments'] = requestParameters.minSegments;
        }

        if (requestParameters.mediaSourceId !== undefined) {
            queryParameters['mediaSourceId'] = requestParameters.mediaSourceId;
        }

        if (requestParameters.deviceId !== undefined) {
            queryParameters['deviceId'] = requestParameters.deviceId;
        }

        if (requestParameters.audioCodec !== undefined) {
            queryParameters['audioCodec'] = requestParameters.audioCodec;
        }

        if (requestParameters.enableAutoStreamCopy !== undefined) {
            queryParameters['enableAutoStreamCopy'] = requestParameters.enableAutoStreamCopy;
        }

        if (requestParameters.allowVideoStreamCopy !== undefined) {
            queryParameters['allowVideoStreamCopy'] = requestParameters.allowVideoStreamCopy;
        }

        if (requestParameters.allowAudioStreamCopy !== undefined) {
            queryParameters['allowAudioStreamCopy'] = requestParameters.allowAudioStreamCopy;
        }

        if (requestParameters.breakOnNonKeyFrames !== undefined) {
            queryParameters['breakOnNonKeyFrames'] = requestParameters.breakOnNonKeyFrames;
        }

        if (requestParameters.audioSampleRate !== undefined) {
            queryParameters['audioSampleRate'] = requestParameters.audioSampleRate;
        }

        if (requestParameters.maxAudioBitDepth !== undefined) {
            queryParameters['maxAudioBitDepth'] = requestParameters.maxAudioBitDepth;
        }

        if (requestParameters.audioBitRate !== undefined) {
            queryParameters['audioBitRate'] = requestParameters.audioBitRate;
        }

        if (requestParameters.audioChannels !== undefined) {
            queryParameters['audioChannels'] = requestParameters.audioChannels;
        }

        if (requestParameters.maxAudioChannels !== undefined) {
            queryParameters['maxAudioChannels'] = requestParameters.maxAudioChannels;
        }

        if (requestParameters.profile !== undefined) {
            queryParameters['profile'] = requestParameters.profile;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.framerate !== undefined) {
            queryParameters['framerate'] = requestParameters.framerate;
        }

        if (requestParameters.maxFramerate !== undefined) {
            queryParameters['maxFramerate'] = requestParameters.maxFramerate;
        }

        if (requestParameters.copyTimestamps !== undefined) {
            queryParameters['copyTimestamps'] = requestParameters.copyTimestamps;
        }

        if (requestParameters.startTimeTicks !== undefined) {
            queryParameters['startTimeTicks'] = requestParameters.startTimeTicks;
        }

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.videoBitRate !== undefined) {
            queryParameters['videoBitRate'] = requestParameters.videoBitRate;
        }

        if (requestParameters.subtitleStreamIndex !== undefined) {
            queryParameters['subtitleStreamIndex'] = requestParameters.subtitleStreamIndex;
        }

        if (requestParameters.subtitleMethod !== undefined) {
            queryParameters['subtitleMethod'] = requestParameters.subtitleMethod;
        }

        if (requestParameters.maxRefFrames !== undefined) {
            queryParameters['maxRefFrames'] = requestParameters.maxRefFrames;
        }

        if (requestParameters.maxVideoBitDepth !== undefined) {
            queryParameters['maxVideoBitDepth'] = requestParameters.maxVideoBitDepth;
        }

        if (requestParameters.requireAvc !== undefined) {
            queryParameters['requireAvc'] = requestParameters.requireAvc;
        }

        if (requestParameters.deInterlace !== undefined) {
            queryParameters['deInterlace'] = requestParameters.deInterlace;
        }

        if (requestParameters.requireNonAnamorphic !== undefined) {
            queryParameters['requireNonAnamorphic'] = requestParameters.requireNonAnamorphic;
        }

        if (requestParameters.transcodingMaxAudioChannels !== undefined) {
            queryParameters['transcodingMaxAudioChannels'] = requestParameters.transcodingMaxAudioChannels;
        }

        if (requestParameters.cpuCoreLimit !== undefined) {
            queryParameters['cpuCoreLimit'] = requestParameters.cpuCoreLimit;
        }

        if (requestParameters.liveStreamId !== undefined) {
            queryParameters['liveStreamId'] = requestParameters.liveStreamId;
        }

        if (requestParameters.enableMpegtsM2TsMode !== undefined) {
            queryParameters['enableMpegtsM2TsMode'] = requestParameters.enableMpegtsM2TsMode;
        }

        if (requestParameters.videoCodec !== undefined) {
            queryParameters['videoCodec'] = requestParameters.videoCodec;
        }

        if (requestParameters.subtitleCodec !== undefined) {
            queryParameters['subtitleCodec'] = requestParameters.subtitleCodec;
        }

        if (requestParameters.transcodingReasons !== undefined) {
            queryParameters['transcodingReasons'] = requestParameters.transcodingReasons;
        }

        if (requestParameters.audioStreamIndex !== undefined) {
            queryParameters['audioStreamIndex'] = requestParameters.audioStreamIndex;
        }

        if (requestParameters.videoStreamIndex !== undefined) {
            queryParameters['videoStreamIndex'] = requestParameters.videoStreamIndex;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.streamOptions !== undefined) {
            queryParameters['streamOptions'] = requestParameters.streamOptions;
        }

        if (requestParameters.enableAdaptiveBitrateStreaming !== undefined) {
            queryParameters['enableAdaptiveBitrateStreaming'] = requestParameters.enableAdaptiveBitrateStreaming;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Emby-Authorization"] = this.configuration.apiKey("X-Emby-Authorization"); // CustomAuthentication authentication
        }

        const response = await this.request({
            path: `/Videos/{itemId}/master.m3u8`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gets a video hls playlist stream.
     */
    async headMasterHlsVideoPlaylist(requestParameters: HeadMasterHlsVideoPlaylistRequest): Promise<any> {
        const response = await this.headMasterHlsVideoPlaylistRaw(requestParameters);
        return await response.value();
    }

}
